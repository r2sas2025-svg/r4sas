[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "R Course: Beginner to Expert",
    "section": "",
    "text": "1 About this Course\nThis Course from R beginner to expert, with a practical focus on clinical programming (CDISC/ADaM and TLFs).\nEach chapter includes step-by-step explanations, runnable code, and short exercises.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Welcome</span>"
    ]
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "R Course: Beginner to Expert",
    "section": "1.1 How to Use",
    "text": "1.1 How to Use\n\nInstall: R (≥4.2), RStudio (or VS Code).\nFollow along chapter-by-chapter, running code and completing exercises.\nUse sample data or your own clinical trial datasets (SAS/CSV). ## Structure (Highlights)\n\n\nBasics & Data: R syntax, data types/structures, vectors/data frames/lists.\nI/O: Read SAS datasets (with haven), handle labels, and clean raw data.\nProgramming: Base functions, write your own functions, validate with tests.\nDevOps: Create an R package, connect Git in RStudio/GitHub.\nCDISC: Build ADaM (ADSL) from SDTM-like inputs.\nTLFs: Produce a baseline Table 1, a KM plot, and a listing.\n\n\nTip: If you don’t have sample SDTM/ADaM data yet, the chapters generate small synthetic data as a fallback so everything runs end-to-end. ## contact For questions or feedback, reach out to r2sas2025@gmail.com",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Welcome</span>"
    ]
  },
  {
    "objectID": "01-r-basics.html",
    "href": "01-r-basics.html",
    "title": "2  R Basics",
    "section": "",
    "text": "3 R as a Calculator\n\n1 + 1\n\n[1] 2\n\n3 * (4 + 5)\n\n[1] 27\n\n\n\n\n4 Objects & Assignment\n\nx &lt;- 10\ny &lt;- 3.5\nx + y\n\n[1] 13.5\n\n\n\n\n5 object naming rules\n\nR variable names can contain letters, numbers, periods, and underscores. However, they cannot start with a number or underscore. R is case-sensitive, so age, Age, and AGE would be considered different variables.\nR variable names should be descriptive and meaningful. Avoid using reserved words or function names as variable names.\nA variable can have a short name (like x and y) or a more descriptive name (age, carname, total_volume). Rules for R variables are:\nA variable name must start with a letter and can be a combination of letters, digits, period(.) and underscore(_). If it starts with period(.), it cannot be followed by a digit.\nA variable name cannot start with a number or underscore (_) Variable names are case-sensitive (age, Age and AGE are three different variables) Reserved words cannot be used as variables (TRUE, FALSE, NULL, if…)\nVariable names should not contain spaces. Use underscore (_) or period (.) to separate words in a variable name.\nVariable names should be meaningful and descriptive. Avoid using single-letter variable names except for temporary variables in loops or functions.\n\n\n\n6 Basic Operations in R\nR supports various basic operations, including: * Arithmetic Operations: Addition (+), subtraction (-), multiplication (*), division (/), and exponentiation (^). Example:\n\na &lt;- 10\nb &lt;- 5\nsum &lt;- a + b\ndiff &lt;- a - b\nprod &lt;- a * b\nquot &lt;- a / b\nexp &lt;- a ^ b\nsum; diff; prod; quot; exp\n\n[1] 15\n\n\n[1] 5\n\n\n[1] 50\n\n\n[1] 2\n\n\n[1] 1e+05\n\n\n\nComparison Operations: Equal to (==), not equal to (!=), greater than (&gt;), less than (&lt;), greater than or equal to (&gt;=), and less than or equal to (&lt;=). Example:\n\n\nx &lt;- 10\ny &lt;- 5\neq &lt;- x == y\nneq &lt;- x != y\ngt &lt;- x &gt; y\nlt &lt;- x &lt; y\ngte &lt;- x &gt;= y\nlte &lt;- x &lt;= y\neq; neq; gt; lt; gte; lte\n\n[1] FALSE\n\n\n[1] TRUE\n\n\n[1] TRUE\n\n\n[1] FALSE\n\n\n[1] TRUE\n\n\n[1] FALSE\n\n\n\nLogical Operations: AND (&), OR (|), and NOT (!). Example:\n\n\np &lt;- TRUE\nq &lt;- FALSE\nand &lt;- p & q\nor &lt;- p | q\nnot &lt;- !p\nand; or; not\n\n[1] FALSE\n\n\n[1] TRUE\n\n\n[1] FALSE\n\n\n\n\n7 Comments in R\nComments in R are created using the # symbol. Anything following the # on the same line is considered a comment and is ignored by R during execution. Example:\n\n# This is a comment\nx &lt;- 10  # Assigning value to x\ny &lt;- 5   # Assigning value to y\nsum &lt;- x + y  # Calculating the sum of x and y\nsum  # Output the sum\n\n[1] 15\n\n\n\n\n8 Getting Help in R\nR provides several ways to get help and documentation for functions and packages: * ?function_name: Displays the documentation for a specific function. Example:\n\n?mean\n\n\nhelp(function_name): Another way to access the documentation for a function. Example:\n\n\nhelp(mean)\n\n\nhelp.search(\"keyword\"): Searches for help topics related to a specific keyword. Example:\n\n\nhelp.search(\"regression\")\n\n\nexample(function_name): Shows examples of how to use a specific function. Example:\n\n\nexample(mean)\n\n\nmean&gt; x &lt;- c(0:10, 50)\n\nmean&gt; xm &lt;- mean(x)\n\nmean&gt; c(xm, mean(x, trim = 0.10))\n[1] 8.75 5.50\n\n\n\nvignette(\"package_name\"): Opens the vignette (detailed documentation) for a specific package. Example:\n\n\nvignette(\"dplyr\")\n\nstarting httpd help server ... done\n\n\n\n??keyword: Searches for help topics related to a specific keyword (similar to help .search). Example:\n\n\n??regression\n\n\n\n9 Installing and Loading Packages in R\nR has a vast ecosystem of packages that extend its functionality. To use a package, you need to install it first and then load it into your R session. * Installing a Package: Use the install.packages(\"package_name\") function to install a package from CRAN. Example:\n\ninstall.packages(\"ggplot2\")\n\n\nLoading a Package: Use the library(package_name) function to load an installed package into your R session. Example:\n\n\nlibrary(ggplot2)\n\n# Now you can use functions from the ggplot2 package\n\n\n9.0.1 Saving and Loading Workspaces in R\nYou can save your R workspace (all objects in memory) to a file and load it later * Saving Workspace: Use the save.image(\"file_name.RData\") function to save the entire workspace to a file. Example:\n\nsave.image(\"my_workspace.RData\")\n\n\nLoading Workspace: Use the load(\"file_name.RData\") function to load a saved workspace from a file. Example:\n\n\nload(\"my_workspace.RData\")\n\n\n\n\n10 Working Directory\n\ngetwd()\n\n[1] \"/home/runner/work/r4sas/r4sas\"\n\n# setwd(\"/path/you/want\") # avoid in reproducible code; prefer here::here() for projects\n\n\n\n11 Vectors (Atomic)\n\nnums &lt;- c(1, 2, 3, 4)\nchars &lt;- c(\"a\", \"b\", \"c\")\nlogical &lt;- c(TRUE, FALSE, TRUE)\ntypeof(nums); typeof(chars); typeof(logical)\n\n[1] \"double\"\n\n\n[1] \"character\"\n\n\n[1] \"logical\"\n\n\n\n\n12 Exercises\n\nCreate an object z that stores (5^2 + 7)/3.\nUse ?seq and create a sequence from 0 to 1 by 0.1.\nInspect typeof() for a few objects you create.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R Basics</span>"
    ]
  },
  {
    "objectID": "02-data-types-structures.html",
    "href": "02-data-types-structures.html",
    "title": "3  Data Types & Data Structures",
    "section": "",
    "text": "R has several built-in data structures to store and manipulate different types of data. These include vectors, lists, matrices, data frames, and factors. Below is an overview of each structure along with code examples.\n\n4 Vectors\nVectors are the simplest data structure in R. They store elements of the same type (numeric, character, logical, etc.).\n\n# Creating numeric and character vectors\nnumeric_vector &lt;- c(1, 2, 3, 4)\nchar_vector1 &lt;- c(\"apple\", \"banana\", \"cherry\")\nchar_vector2 &lt;- c(2, 3, 4, 5, \"a\")\nlogical_vector &lt;- c(TRUE, FALSE, TRUE)\n\n# Accessing elements\nnumeric_vector[1]  # Access the first element\n\n[1] 1\n\nv_logical &lt;- c(T,F,T) # logical vector\nv_logical\n\n[1]  TRUE FALSE  TRUE\n\nis.vector(v_logical)\n\n[1] TRUE\n\nis.atomic(v_logical)\n\n[1] TRUE\n\ntypeof(v_logical)\n\n[1] \"logical\"\n\nv_integer &lt;- c(1L,2L,5L) # integer vector\nv_integer\n\n[1] 1 2 5\n\nis.vector(v_integer)\n\n[1] TRUE\n\nis.atomic(v_integer)\n\n[1] TRUE\n\ntypeof(v_integer)\n\n[1] \"integer\"\n\nv_double &lt;- c(1.3,2.1,5.0) # double vector\nv_double\n\n[1] 1.3 2.1 5.0\n\nis.vector(v_double)\n\n[1] TRUE\n\nis.atomic(v_double)\n\n[1] TRUE\n\ntypeof(v_double)\n\n[1] \"double\"\n\nv_character &lt;- c(\"a\", \"b\", \"c\") # character vector\nv_character\n\n[1] \"a\" \"b\" \"c\"\n\nis.vector(v_character)\n\n[1] TRUE\n\nis.atomic(v_character)\n\n[1] TRUE\n\ntypeof(v_character)\n\n[1] \"character\"\n\nv_NULL &lt;- NULL # NULL\nv_NULL\n\nNULL\n\ntypeof(v_NULL)\n\n[1] \"NULL\"\n\n# Mix type vector (type coercion or conversion)\nv_mix &lt;- c(T, 1L, 1.25, \"a\")\nv_mix # all elements converted to charatcers (based on hierarchy)\n\n[1] \"TRUE\" \"1\"    \"1.25\" \"a\"   \n\nis.vector(v_mix)\n\n[1] TRUE\n\ntypeof(v_mix)\n\n[1] \"character\"\n\n# Vector properties\n\nv &lt;- c(1,2,3,4,5)\n\n# vector length\nlength(v)\n\n[1] 5\n\n# type\ntypeof(v)\n\n[1] \"double\"\n\nclass(v)\n\n[1] \"numeric\"\n\n# naming elements\nnames(v) # without names\n\nNULL\n\nvnames &lt;- c(\"first\", \"second\", \"third\", \"fourth\", \"fifth\") # element names\nnames(v) &lt;- vnames # naming elements\nv\n\n first second  third fourth  fifth \n     1      2      3      4      5 \n\nnames(v) # new names\n\n[1] \"first\"  \"second\" \"third\"  \"fourth\" \"fifth\" \n\n# Create vector, access elements, modify vector\n\n# create using c()\nv &lt;- c(1,3,5,8,0)\n\n# create using operator :\n1:100\n\n  [1]   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18\n [19]  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36\n [37]  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54\n [55]  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72\n [73]  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90\n [91]  91  92  93  94  95  96  97  98  99 100\n\n10:-10\n\n [1]  10   9   8   7   6   5   4   3   2   1   0  -1  -2  -3  -4  -5  -6  -7  -8\n[20]  -9 -10\n\n# using sequence seq()\nv &lt;- seq(from = 1, to = 100, by = 1)\nv\n\n  [1]   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18\n [19]  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36\n [37]  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54\n [55]  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72\n [73]  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90\n [91]  91  92  93  94  95  96  97  98  99 100\n\nv &lt;- seq(from = 0, to = 1, by = 0.01)\nv\n\n  [1] 0.00 0.01 0.02 0.03 0.04 0.05 0.06 0.07 0.08 0.09 0.10 0.11 0.12 0.13 0.14\n [16] 0.15 0.16 0.17 0.18 0.19 0.20 0.21 0.22 0.23 0.24 0.25 0.26 0.27 0.28 0.29\n [31] 0.30 0.31 0.32 0.33 0.34 0.35 0.36 0.37 0.38 0.39 0.40 0.41 0.42 0.43 0.44\n [46] 0.45 0.46 0.47 0.48 0.49 0.50 0.51 0.52 0.53 0.54 0.55 0.56 0.57 0.58 0.59\n [61] 0.60 0.61 0.62 0.63 0.64 0.65 0.66 0.67 0.68 0.69 0.70 0.71 0.72 0.73 0.74\n [76] 0.75 0.76 0.77 0.78 0.79 0.80 0.81 0.82 0.83 0.84 0.85 0.86 0.87 0.88 0.89\n [91] 0.90 0.91 0.92 0.93 0.94 0.95 0.96 0.97 0.98 0.99 1.00\n\nv &lt;- seq(from = 0, to = 10, length.out = 5)\nv\n\n[1]  0.0  2.5  5.0  7.5 10.0\n\n# let's create a vector for accessing vector elements\nv &lt;- 1:10\nnames(v) &lt;- c(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\")\nv\n\n a  b  c  d  e  f  g  h  i  j \n 1  2  3  4  5  6  7  8  9 10 \n\n# access vector elements using integer vector index\nv[c(1,5,10)]\n\n a  e  j \n 1  5 10 \n\nv[1:5] # range index selection (slicing)\n\na b c d e \n1 2 3 4 5 \n\nv[seq(from = 1, to = 9, by = 2)]\n\na c e g i \n1 3 5 7 9 \n\nv[10:1] # reverse order selection\n\n j  i  h  g  f  e  d  c  b  a \n10  9  8  7  6  5  4  3  2  1 \n\nv[c(10,1,5,3)] # mix orfer selection\n\n j  a  e  c \n10  1  5  3 \n\n# access vector elements using logical vector index\nv[c(T,F,F,F,F,F,F,F,F,F)] # access first element\n\na \n1 \n\nv[c(F,F,F,F,F,F,F,T,T,T)] # access last three elements\n\n h  i  j \n 8  9 10 \n\n# access elements using names\nv[c(\"a\",\"c\",\"e\")]\n\na c e \n1 3 5 \n\nv[c(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\")]\n\n a  b  c  d  e  f  g  h  i  j \n 1  2  3  4  5  6  7  8  9 10 \n\n# modify vector elements\nv\n\n a  b  c  d  e  f  g  h  i  j \n 1  2  3  4  5  6  7  8  9 10 \n\nv[2] &lt;- 20 # alter second element\nv\n\n a  b  c  d  e  f  g  h  i  j \n 1 20  3  4  5  6  7  8  9 10 \n\nv[c(1,5,10)] &lt;- c(0,0,0) # alter multiple elements\nv\n\n a  b  c  d  e  f  g  h  i  j \n 0 20  3  4  0  6  7  8  9  0 \n\n# modify elements with value 0\nv\n\n a  b  c  d  e  f  g  h  i  j \n 0 20  3  4  0  6  7  8  9  0 \n\nv[v==0] # filter with condition\n\na e j \n0 0 0 \n\nv[v==0] &lt;- 1000\nv\n\n   a    b    c    d    e    f    g    h    i    j \n1000   20    3    4 1000    6    7    8    9 1000 \n\n# truncate vector to first 3 elements\nv &lt;- v[1:3]\nv\n\n   a    b    c \n1000   20    3 \n\n# transpose vector change row to column vector or vice versa\nv\n\n   a    b    c \n1000   20    3 \n\nt(v)\n\n        a  b c\n[1,] 1000 20 3\n\n# delete or remove a vector\nv &lt;- NULL\nv\n\nNULL\n\nrm(v)\n\n# combine 2 different vectors\nv1 &lt;- 1:3\nv2 &lt;- 100:105\nv1\n\n[1] 1 2 3\n\nv2\n\n[1] 100 101 102 103 104 105\n\nv3 &lt;- c(v1,v2) # combine vectors\nv3\n\n[1]   1   2   3 100 101 102 103 104 105\n\n# repet elements of a vector\nrep(x = v1, times = 2)\n\n[1] 1 2 3 1 2 3\n\nrep(x = v1, times = 100)\n\n  [1] 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1\n [38] 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2\n [75] 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3\n[112] 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1\n[149] 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2\n[186] 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3\n[223] 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1\n[260] 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2\n[297] 3 1 2 3\n\nrep(10,10)\n\n [1] 10 10 10 10 10 10 10 10 10 10\n\n# Vector arithmetics\n\n# vector - scalar (scalar with each vector element)\nv &lt;- 1:5\na &lt;- 10\nv\n\n[1] 1 2 3 4 5\n\na\n\n[1] 10\n\n# Addition +\nv + a\n\n[1] 11 12 13 14 15\n\n# Subtraction -\nv - a\n\n[1] -9 -8 -7 -6 -5\n\n# Multiplication *\nv * a\n\n[1] 10 20 30 40 50\n\n# Division /\nv / a\n\n[1] 0.1 0.2 0.3 0.4 0.5\n\n# Exponent ^  **\nv^a\n\n[1]       1    1024   59049 1048576 9765625\n\n# Modulus (Remainder from division) %%\nv %% 2\n\n[1] 1 0 1 0 1\n\n# Integer Division %/%\nv %/% 2\n\n[1] 0 1 1 2 2\n\n# Other functions on vector elements\nsqrt(v)\n\n[1] 1.000000 1.414214 1.732051 2.000000 2.236068\n\nlog(v)\n\n[1] 0.0000000 0.6931472 1.0986123 1.3862944 1.6094379\n\nsum(v)\n\n[1] 15\n\n# vector - vector (vector element to element | member-by-member)\nv1 &lt;- seq(10,30,10)\nv2 &lt;- rep(3,3)\n\n# Addition +\nv1 + v2\n\n[1] 13 23 33\n\n# Subtraction -\nv1 - v2\n\n[1]  7 17 27\n\n# Multiplication *\nv1 * v2\n\n[1] 30 60 90\n\n# Division /\nv1 / v2\n\n[1]  3.333333  6.666667 10.000000\n\n# Exponent ^  **\nv1^v2\n\n[1]  1000  8000 27000\n\n# Modulus (Remainder from division) %%\nv1 %% v2\n\n[1] 1 2 0\n\n# Integer Division %/%\nv1 %/% v2\n\n[1]  3  6 10\n\n# Vector-matrix style multiplication\nv1\n\n[1] 10 20 30\n\nv2\n\n[1] 3 3 3\n\n10*3 + 20*3 + 30*3\n\n[1] 180\n\nt(v1) %*% v2\n\n     [,1]\n[1,]  180\n\nv1 %*% v2\n\n     [,1]\n[1,]  180\n\nv1 %*% t(v2)\n\n     [,1] [,2] [,3]\n[1,]   30   30   30\n[2,]   60   60   60\n[3,]   90   90   90\n\n# Recycling rule\nv1 &lt;- c(1,1,1)\nv2 &lt;- 1:6\nv1\n\n[1] 1 1 1\n\nv2\n\n[1] 1 2 3 4 5 6\n\nv1 + v2\n\n[1] 2 3 4 5 6 7\n\n#  Set operations\n\nv1 &lt;- c(\"a\", \"b\", \"c\")\nv2 &lt;- c(\"c\", \"d\", \"e\")\nv1\n\n[1] \"a\" \"b\" \"c\"\n\nv2\n\n[1] \"c\" \"d\" \"e\"\n\nunion(v1,v2) # union of both sets (all unique elements)\n\n[1] \"a\" \"b\" \"c\" \"d\" \"e\"\n\nintersect(v1,v2) # intersection of both sets (elements in both sets)\n\n[1] \"c\"\n\nsetdiff(v1,v2) # difference of elements (elements in v1 and not in v2)\n\n[1] \"a\" \"b\"\n\nidentical(v1, v2) # check if vectors are identical\n\n[1] FALSE\n\nidentical(c(1,2,3), c(1,2,3))\n\n[1] TRUE\n\n\n\n\n5 Lists\nA list can contain elements of different types, including other lists or vectors or data structures.\n\n# Creating a list\nmy_list &lt;- list(name = \"John\", age = 25, scores = c(90, 85, 88))\n\n# Accessing elements by name\nmy_list$name  # Output: \"John\"\n\n[1] \"John\"\n\n# Create a list (and name elements)\n\n# lets create some variables (different types)\na &lt;- 10\nb &lt;- 2L\nc &lt;- TRUE\nd &lt;- \"word\"\nv &lt;- 1:10\nnames(v) &lt;- paste(\"i\", v, sep = \"\")\nM &lt;- matrix(data = seq(10,40,by = 10), nrow = 2, dimnames = list(c(\"r1\", \"r2\"), c(\"c1\", \"c2\")))\nA &lt;- array(data = 1:8, dim = c(2,2,2), dimnames = list(c(\"r1\", \"r2\"), c(\"c1\", \"c2\"), c(\"M1\", \"M2\"))) \n\n# create list and include all variables (elements)\nlst &lt;- list(a, b, c, d, v, M, A)\nlst\n\n[[1]]\n[1] 10\n\n[[2]]\n[1] 2\n\n[[3]]\n[1] TRUE\n\n[[4]]\n[1] \"word\"\n\n[[5]]\n i1  i2  i3  i4  i5  i6  i7  i8  i9 i10 \n  1   2   3   4   5   6   7   8   9  10 \n\n[[6]]\n   c1 c2\nr1 10 30\nr2 20 40\n\n[[7]]\n, , M1\n\n   c1 c2\nr1  1  3\nr2  2  4\n\n, , M2\n\n   c1 c2\nr1  5  7\nr2  6  8\n\nstr(lst) # check list structure\n\nList of 7\n $ : num 10\n $ : int 2\n $ : logi TRUE\n $ : chr \"word\"\n $ : Named int [1:10] 1 2 3 4 5 6 7 8 9 10\n  ..- attr(*, \"names\")= chr [1:10] \"i1\" \"i2\" \"i3\" \"i4\" ...\n $ : num [1:2, 1:2] 10 20 30 40\n  ..- attr(*, \"dimnames\")=List of 2\n  .. ..$ : chr [1:2] \"r1\" \"r2\"\n  .. ..$ : chr [1:2] \"c1\" \"c2\"\n $ : int [1:2, 1:2, 1:2] 1 2 3 4 5 6 7 8\n  ..- attr(*, \"dimnames\")=List of 3\n  .. ..$ : chr [1:2] \"r1\" \"r2\"\n  .. ..$ : chr [1:2] \"c1\" \"c2\"\n  .. ..$ : chr [1:2] \"M1\" \"M2\"\n\ntypeof(lst) # check type\n\n[1] \"list\"\n\nclass(lst) # check class\n\n[1] \"list\"\n\nis.list(lst) # check if object is list\n\n[1] TRUE\n\n# name each list member\nnames(lst) &lt;- c(\"a\", \"b\", \"c\", \"d\", \"v\", \"M\", \"A\")\nlst\n\n$a\n[1] 10\n\n$b\n[1] 2\n\n$c\n[1] TRUE\n\n$d\n[1] \"word\"\n\n$v\n i1  i2  i3  i4  i5  i6  i7  i8  i9 i10 \n  1   2   3   4   5   6   7   8   9  10 \n\n$M\n   c1 c2\nr1 10 30\nr2 20 40\n\n$A\n, , M1\n\n   c1 c2\nr1  1  3\nr2  2  4\n\n, , M2\n\n   c1 c2\nr1  5  7\nr2  6  8\n\n# alternative: define names as tags when list is created\nlist(a=a, b=b, c=c, d=d, v=v, M=M, A=A)\n\n$a\n[1] 10\n\n$b\n[1] 2\n\n$c\n[1] TRUE\n\n$d\n[1] \"word\"\n\n$v\n i1  i2  i3  i4  i5  i6  i7  i8  i9 i10 \n  1   2   3   4   5   6   7   8   9  10 \n\n$M\n   c1 c2\nr1 10 30\nr2 20 40\n\n$A\n, , M1\n\n   c1 c2\nr1  1  3\nr2  2  4\n\n, , M2\n\n   c1 c2\nr1  5  7\nr2  6  8\n\n# Access list elements\n\n# single square bracket [] (return a list)\nlst1 &lt;-lst[1] # access first list elements (return a list)\nstr(lst1)\n\nList of 1\n $ a: num 10\n\nclass(lst1)\n\n[1] \"list\"\n\nlst123 &lt;-lst[c(1,2,3)] # access first three elements with index vector (return a list)\nlst123\n\n$a\n[1] 10\n\n$b\n[1] 2\n\n$c\n[1] TRUE\n\nclass(lst123)\n\n[1] \"list\"\n\n# double square brackets [[]] (return original member)\nele &lt;-lst[[5]] # extract 5th member-element (returns original element)\nele\n\n i1  i2  i3  i4  i5  i6  i7  i8  i9 i10 \n  1   2   3   4   5   6   7   8   9  10 \n\nis.vector(ele)\n\n[1] TRUE\n\n# use $ operator - extract by member name (return original member)\nele &lt;- lst$M\nele\n\n   c1 c2\nr1 10 30\nr2 20 40\n\nclass(ele)\n\n[1] \"matrix\" \"array\" \n\n#  Modify list \n\n# remove element from a list\nlst\n\n$a\n[1] 10\n\n$b\n[1] 2\n\n$c\n[1] TRUE\n\n$d\n[1] \"word\"\n\n$v\n i1  i2  i3  i4  i5  i6  i7  i8  i9 i10 \n  1   2   3   4   5   6   7   8   9  10 \n\n$M\n   c1 c2\nr1 10 30\nr2 20 40\n\n$A\n, , M1\n\n   c1 c2\nr1  1  3\nr2  2  4\n\n, , M2\n\n   c1 c2\nr1  5  7\nr2  6  8\n\nlst[1] &lt;- NULL # remove first member\nlst\n\n$b\n[1] 2\n\n$c\n[1] TRUE\n\n$d\n[1] \"word\"\n\n$v\n i1  i2  i3  i4  i5  i6  i7  i8  i9 i10 \n  1   2   3   4   5   6   7   8   9  10 \n\n$M\n   c1 c2\nr1 10 30\nr2 20 40\n\n$A\n, , M1\n\n   c1 c2\nr1  1  3\nr2  2  4\n\n, , M2\n\n   c1 c2\nr1  5  7\nr2  6  8\n\n# add element to a list (at the end)\nlength(lst)\n\n[1] 6\n\nlst[7] &lt;- 1000\nlst\n\n$b\n[1] 2\n\n$c\n[1] TRUE\n\n$d\n[1] \"word\"\n\n$v\n i1  i2  i3  i4  i5  i6  i7  i8  i9 i10 \n  1   2   3   4   5   6   7   8   9  10 \n\n$M\n   c1 c2\nr1 10 30\nr2 20 40\n\n$A\n, , M1\n\n   c1 c2\nr1  1  3\nr2  2  4\n\n, , M2\n\n   c1 c2\nr1  5  7\nr2  6  8\n\n\n[[7]]\n[1] 1000\n\n# update value of a member in alist\nlst[[7]] &lt;- 500\nlst[7]\n\n[[1]]\n[1] 500\n\n# update value within a vector (on a list)\nlst[[4]][5] &lt;- 5000\nlst[[4]]\n\n  i1   i2   i3   i4   i5   i6   i7   i8   i9  i10 \n   1    2    3    4 5000    6    7    8    9   10 \n\n# convert list to a vector\nvec &lt;- unlist(lst)\nvec\n\n     b      c      d   v.i1   v.i2   v.i3   v.i4   v.i5   v.i6   v.i7   v.i8 \n   \"2\" \"TRUE\" \"word\"    \"1\"    \"2\"    \"3\"    \"4\" \"5000\"    \"6\"    \"7\"    \"8\" \n  v.i9  v.i10     M1     M2     M3     M4     A1     A2     A3     A4     A5 \n   \"9\"   \"10\"   \"10\"   \"20\"   \"30\"   \"40\"    \"1\"    \"2\"    \"3\"    \"4\"    \"5\" \n    A6     A7     A8        \n   \"6\"    \"7\"    \"8\"  \"500\" \n\nis.vector(vec)\n\n[1] TRUE\n\n#  Merging lists & nested lists\n\n# create another list\nlst1 &lt;- list(el1 = c(1,5,10), el2 = TRUE)\n\n# merge both lists\nlst_merged &lt;- c(lst, lst1)\nlst_merged\n\n$b\n[1] 2\n\n$c\n[1] TRUE\n\n$d\n[1] \"word\"\n\n$v\n  i1   i2   i3   i4   i5   i6   i7   i8   i9  i10 \n   1    2    3    4 5000    6    7    8    9   10 \n\n$M\n   c1 c2\nr1 10 30\nr2 20 40\n\n$A\n, , M1\n\n   c1 c2\nr1  1  3\nr2  2  4\n\n, , M2\n\n   c1 c2\nr1  5  7\nr2  6  8\n\n\n[[7]]\n[1] 500\n\n$el1\n[1]  1  5 10\n\n$el2\n[1] TRUE\n\nstr(lst_merged)\n\nList of 9\n $ b  : int 2\n $ c  : logi TRUE\n $ d  : chr \"word\"\n $ v  : Named num [1:10] 1 2 3 4 5000 6 7 8 9 10\n  ..- attr(*, \"names\")= chr [1:10] \"i1\" \"i2\" \"i3\" \"i4\" ...\n $ M  : num [1:2, 1:2] 10 20 30 40\n  ..- attr(*, \"dimnames\")=List of 2\n  .. ..$ : chr [1:2] \"r1\" \"r2\"\n  .. ..$ : chr [1:2] \"c1\" \"c2\"\n $ A  : int [1:2, 1:2, 1:2] 1 2 3 4 5 6 7 8\n  ..- attr(*, \"dimnames\")=List of 3\n  .. ..$ : chr [1:2] \"r1\" \"r2\"\n  .. ..$ : chr [1:2] \"c1\" \"c2\"\n  .. ..$ : chr [1:2] \"M1\" \"M2\"\n $    : num 500\n $ el1: num [1:3] 1 5 10\n $ el2: logi TRUE\n\nnames(lst_merged)\n\n[1] \"b\"   \"c\"   \"d\"   \"v\"   \"M\"   \"A\"   \"\"    \"el1\" \"el2\"\n\n# nested list (recursive procedure)\nlist3 &lt;- list(1, c(T,F,F)) # list sub-level 3\nlist2 &lt;- list(list3) # list sub-level 2\nlist1 &lt;- list(list2) # list sub-level 1\n\nstr(list1)\n\nList of 1\n $ :List of 1\n  ..$ :List of 2\n  .. ..$ : num 1\n  .. ..$ : logi [1:3] TRUE FALSE FALSE\n\n# extract list level 2\nlist1[[1]]\n\n[[1]]\n[[1]][[1]]\n[1] 1\n\n[[1]][[2]]\n[1]  TRUE FALSE FALSE\n\n# extract list level 3\nlist1[[1]][[1]]\n\n[[1]]\n[1] 1\n\n[[2]]\n[1]  TRUE FALSE FALSE\n\n# extract 1st member from list level 3\nlist1[[1]][[1]][[1]]\n\n[1] 1\n\n# extract 2nd member from list level 3\nlist1[[1]][[1]][[2]]\n\n[1]  TRUE FALSE FALSE\n\n\n\n\n6 Matrices\nA matrix is a two-dimensional structure that contains elements of the same type (numeric, character, or logical).\n\n# Creating a 3x3 numeric matrix\nmy_matrix &lt;- matrix(1:9, nrow = 3, ncol = 3)\n\n# Accessing elements\nmy_matrix[1, 2]  # Access the element in row 1, column 2\n\n[1] 4\n\n# using matrix()\nM &lt;- matrix(data = 1:9, nrow = 3, ncol = 3)\nM\n\n     [,1] [,2] [,3]\n[1,]    1    4    7\n[2,]    2    5    8\n[3,]    3    6    9\n\nM &lt;- matrix(data = 1:9, nrow = 3, ncol = 3, byrow = T)\nM\n\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    4    5    6\n[3,]    7    8    9\n\nmatrix(data = 1:6, nrow = 2, ncol = 3)\n\n     [,1] [,2] [,3]\n[1,]    1    3    5\n[2,]    2    4    6\n\n# by merging multiple vectors\nv1 &lt;- c(1,2,3)\nv2 &lt;- c(4,5,6)\nv3 &lt;- c(7,8,9)\n\nrbind(v1,v2,v3)\n\n   [,1] [,2] [,3]\nv1    1    2    3\nv2    4    5    6\nv3    7    8    9\n\ncbind(v1,v2,v3)\n\n     v1 v2 v3\n[1,]  1  4  7\n[2,]  2  5  8\n[3,]  3  6  9\n\n# by altering vector dimension\nv &lt;- 1:9\nv\n\n[1] 1 2 3 4 5 6 7 8 9\n\ndim(v) &lt;- c(3,3)\nv\n\n     [,1] [,2] [,3]\n[1,]    1    4    7\n[2,]    2    5    8\n[3,]    3    6    9\n\n# Matrix properties\n\n# rownames & colnames\nM &lt;- matrix(1:12, nrow = 4, dimnames = list(c(\"r1\",\"r2\",\"r3\", \"r4\"), c(\"c1\",\"c2\",\"c3\")))\nM\n\n   c1 c2 c3\nr1  1  5  9\nr2  2  6 10\nr3  3  7 11\nr4  4  8 12\n\nrownames(M)\n\n[1] \"r1\" \"r2\" \"r3\" \"r4\"\n\ncolnames(M)\n\n[1] \"c1\" \"c2\" \"c3\"\n\n# matrix dimension\ndim(M)\n\n[1] 4 3\n\n# get all attributes\nattributes(M)\n\n$dim\n[1] 4 3\n\n$dimnames\n$dimnames[[1]]\n[1] \"r1\" \"r2\" \"r3\" \"r4\"\n\n$dimnames[[2]]\n[1] \"c1\" \"c2\" \"c3\"\n\n# change rownames & colnames\nrownames(M) &lt;- paste(\"row \", 1:4, sep = \"\")\ncolnames(M) &lt;- paste(\"col \", 1:3, sep = \"\")\nattributes(M)\n\n$dim\n[1] 4 3\n\n$dimnames\n$dimnames[[1]]\n[1] \"row 1\" \"row 2\" \"row 3\" \"row 4\"\n\n$dimnames[[2]]\n[1] \"col 1\" \"col 2\" \"col 3\"\n\nM\n\n      col 1 col 2 col 3\nrow 1     1     5     9\nrow 2     2     6    10\nrow 3     3     7    11\nrow 4     4     8    12\n\n# class and type\nclass(M)\n\n[1] \"matrix\" \"array\" \n\ntypeof(M)\n\n[1] \"integer\"\n\n# check for matrix\nis.matrix(M)\n\n[1] TRUE\n\n# Access matrix elements\n\n# integer vector as index\nM\n\n      col 1 col 2 col 3\nrow 1     1     5     9\nrow 2     2     6    10\nrow 3     3     7    11\nrow 4     4     8    12\n\nM[2,3]\n\n[1] 10\n\nM[c(1,2),3]\n\nrow 1 row 2 \n    9    10 \n\nM[c(2,3),] # selected rows and all columns\n\n      col 1 col 2 col 3\nrow 2     2     6    10\nrow 3     3     7    11\n\nM[,c(2,3)] # selected columns and all rows\n\n      col 2 col 3\nrow 1     5     9\nrow 2     6    10\nrow 3     7    11\nrow 4     8    12\n\n# logical vector as index\nM[c(T,T,F,F), c(T,T,T)]\n\n      col 1 col 2 col 3\nrow 1     1     5     9\nrow 2     2     6    10\n\n# character vector as index\nM[c(\"row 2\", \"row 3\"), c(\"col 1\", \"col 2\")]\n\n      col 1 col 2\nrow 2     2     6\nrow 3     3     7\n\n# range of indexes (slicing rows and columns)\nM[1:3,2:3]\n\n      col 2 col 3\nrow 1     5     9\nrow 2     6    10\nrow 3     7    11\n\n# Access matrix elements\n\n# modify 1 element\nM\n\n      col 1 col 2 col 3\nrow 1     1     5     9\nrow 2     2     6    10\nrow 3     3     7    11\nrow 4     4     8    12\n\nM[1,1] &lt;- 10\nM\n\n      col 1 col 2 col 3\nrow 1    10     5     9\nrow 2     2     6    10\nrow 3     3     7    11\nrow 4     4     8    12\n\n# modify more than one element\nM[2:3,3] &lt;- 20 \nM\n\n      col 1 col 2 col 3\nrow 1    10     5     9\nrow 2     2     6    20\nrow 3     3     7    20\nrow 4     4     8    12\n\n# modify elements based on condition\nM[M&gt;10] &lt;- 0\nM\n\n      col 1 col 2 col 3\nrow 1    10     5     9\nrow 2     2     6     0\nrow 3     3     7     0\nrow 4     4     8     0\n\n# transpose a matrix\nt(M)\n\n      row 1 row 2 row 3 row 4\ncol 1    10     2     3     4\ncol 2     5     6     7     8\ncol 3     9     0     0     0\n\n# add row to matrix\nM\n\n      col 1 col 2 col 3\nrow 1    10     5     9\nrow 2     2     6     0\nrow 3     3     7     0\nrow 4     4     8     0\n\nrbind(M, c(0,0,0))\n\n      col 1 col 2 col 3\nrow 1    10     5     9\nrow 2     2     6     0\nrow 3     3     7     0\nrow 4     4     8     0\n          0     0     0\n\n# add column to matrix\ncbind(M, c(0,0,0, 0))\n\n      col 1 col 2 col 3  \nrow 1    10     5     9 0\nrow 2     2     6     0 0\nrow 3     3     7     0 0\nrow 4     4     8     0 0\n\n# alter matrix dimensions\ndim(M)\n\n[1] 4 3\n\ndim(M) &lt;- c(3,4) # names are dropped\nM\n\n     [,1] [,2] [,3] [,4]\n[1,]   10    4    7    0\n[2,]    2    5    8    0\n[3,]    3    6    9    0\n\n# merge 2 matrices\nM1 &lt;- matrix(data = rep(0,4), nrow = 2, ncol = 2)\nM2 &lt;- matrix(data = rep(1,4), nrow = 2, ncol = 2)\nM1\n\n     [,1] [,2]\n[1,]    0    0\n[2,]    0    0\n\nM2\n\n     [,1] [,2]\n[1,]    1    1\n[2,]    1    1\n\nrbind(M1,M2)\n\n     [,1] [,2]\n[1,]    0    0\n[2,]    0    0\n[3,]    1    1\n[4,]    1    1\n\ncbind(M1,M2)\n\n     [,1] [,2] [,3] [,4]\n[1,]    0    0    1    1\n[2,]    0    0    1    1\n\n#  Matrix arithmetics\n\n# matrix  - scalar (scalar with each vector element)\nM\n\n     [,1] [,2] [,3] [,4]\n[1,]   10    4    7    0\n[2,]    2    5    8    0\n[3,]    3    6    9    0\n\na &lt;- 10\n\n# Addition +\nM + a\n\n     [,1] [,2] [,3] [,4]\n[1,]   20   14   17   10\n[2,]   12   15   18   10\n[3,]   13   16   19   10\n\n# Subtraction -\nM - a\n\n     [,1] [,2] [,3] [,4]\n[1,]    0   -6   -3  -10\n[2,]   -8   -5   -2  -10\n[3,]   -7   -4   -1  -10\n\n# Multiplication *\nM * a\n\n     [,1] [,2] [,3] [,4]\n[1,]  100   40   70    0\n[2,]   20   50   80    0\n[3,]   30   60   90    0\n\n# Division /\nM / a\n\n     [,1] [,2] [,3] [,4]\n[1,]  1.0  0.4  0.7    0\n[2,]  0.2  0.5  0.8    0\n[3,]  0.3  0.6  0.9    0\n\n# Exponent ^  **\nM^a\n\n           [,1]     [,2]       [,3] [,4]\n[1,] 1.0000e+10  1048576  282475249    0\n[2,] 1.0240e+03  9765625 1073741824    0\n[3,] 5.9049e+04 60466176 3486784401    0\n\n# Modulus (Remainder from division) %%\nM %% 2\n\n     [,1] [,2] [,3] [,4]\n[1,]    0    0    1    0\n[2,]    0    1    0    0\n[3,]    1    0    1    0\n\n# Integer Division %/%\nM %/% 2\n\n     [,1] [,2] [,3] [,4]\n[1,]    5    2    3    0\n[2,]    1    2    4    0\n[3,]    1    3    4    0\n\n# Other functions on matrix elements\nsqrt(M)\n\n         [,1]     [,2]     [,3] [,4]\n[1,] 3.162278 2.000000 2.645751    0\n[2,] 1.414214 2.236068 2.828427    0\n[3,] 1.732051 2.449490 3.000000    0\n\nlog(M)\n\n          [,1]     [,2]     [,3] [,4]\n[1,] 2.3025851 1.386294 1.945910 -Inf\n[2,] 0.6931472 1.609438 2.079442 -Inf\n[3,] 1.0986123 1.791759 2.197225 -Inf\n\nsum(M)\n\n[1] 54\n\n# matrix - vector (matrix element to element | member-by-member)\nM1 &lt;- matrix(data = 1:9, nrow = 3, byrow = T)\nM2 &lt;- matrix(data = rep(3,9), nrow = 3)\n\n# Addition +\nM1 + M2\n\n     [,1] [,2] [,3]\n[1,]    4    5    6\n[2,]    7    8    9\n[3,]   10   11   12\n\n# Subtraction -\nM1 - M2\n\n     [,1] [,2] [,3]\n[1,]   -2   -1    0\n[2,]    1    2    3\n[3,]    4    5    6\n\n# Multiplication *\nM1 * M2\n\n     [,1] [,2] [,3]\n[1,]    3    6    9\n[2,]   12   15   18\n[3,]   21   24   27\n\n# Division /\nM1 / M2\n\n          [,1]      [,2] [,3]\n[1,] 0.3333333 0.6666667    1\n[2,] 1.3333333 1.6666667    2\n[3,] 2.3333333 2.6666667    3\n\n# Exponent ^  **\nM1^M2\n\n     [,1] [,2] [,3]\n[1,]    1    8   27\n[2,]   64  125  216\n[3,]  343  512  729\n\n# Modulus (Remainder from division) %%\nM1 %% M2\n\n     [,1] [,2] [,3]\n[1,]    1    2    0\n[2,]    1    2    0\n[3,]    1    2    0\n\n# Integer Division %/%\nM1 %/% M2\n\n     [,1] [,2] [,3]\n[1,]    0    0    1\n[2,]    1    1    2\n[3,]    2    2    3\n\n# matrix-matrix style multiplication\nM1\n\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    4    5    6\n[3,]    7    8    9\n\nM2\n\n     [,1] [,2] [,3]\n[1,]    3    3    3\n[2,]    3    3    3\n[3,]    3    3    3\n\nt(M1) %*% M2\n\n     [,1] [,2] [,3]\n[1,]   36   36   36\n[2,]   45   45   45\n[3,]   54   54   54\n\nM1 %*% M2\n\n     [,1] [,2] [,3]\n[1,]   18   18   18\n[2,]   45   45   45\n[3,]   72   72   72\n\n# matrix algebra (matrix based functions)\nM &lt;- matrix(data = c(1,5,3,2,4,7,4,6,2), nrow = 3, byrow = T)\n\n# get diagonal elements\ndiag(M)\n\n[1] 1 4 2\n\n# get matrix determinant\ndet(M)\n\n[1] 74\n\n# get inverse of a matrix M^(-1)\nsolve(M)\n\n            [,1]       [,2]        [,3]\n[1,] -0.45945946  0.1081081  0.31081081\n[2,]  0.32432432 -0.1351351 -0.01351351\n[3,] -0.05405405  0.1891892 -0.08108108\n\n# get eigen values\neigen(M)\n\neigen() decomposition\n$values\n[1] 11.778446+0.0000000i -2.389223+0.7578106i -2.389223-0.7578106i\n\n$vectors\n             [,1]                  [,2]                  [,3]\n[1,] 0.4687233+0i  0.5211486+0.2411697i  0.5211486-0.2411697i\n[2,] 0.6544420+0i -0.6642393+0.0000000i -0.6642393+0.0000000i\n[3,] 0.5932993+0i  0.4573822-0.1408153i  0.4573822+0.1408153i\n\n# calculate sum over rows or columns\nM\n\n     [,1] [,2] [,3]\n[1,]    1    5    3\n[2,]    2    4    7\n[3,]    4    6    2\n\nrowSums(M)\n\n[1]  9 13 12\n\ncolSums(M)\n\n[1]  7 15 12\n\n# Lets solve simple matrix equation\n# A * X = B\nA &lt;- matrix(data = c(1,2,4,5), nrow = 2, byrow = T)\nB &lt;- matrix(data = c(5,24,17,66), nrow = 2, byrow = T)\n# X = A^(-1) * B\nX &lt;- solve(A) %*% B\nX\n\n     [,1] [,2]\n[1,]    3    4\n[2,]    1   10\n\n# test\nA %*% X # should get B\n\n     [,1] [,2]\n[1,]    5   24\n[2,]   17   66\n\n# summarizing a matrix (apply)\nM\n\n     [,1] [,2] [,3]\n[1,]    1    5    3\n[2,]    2    4    7\n[3,]    4    6    2\n\n# sum of rows\napply(X = M, MARGIN = 1, FUN = sum)\n\n[1]  9 13 12\n\n# sum of columns\napply(X = M, MARGIN = 2, FUN = sum)\n\n[1]  7 15 12\n\n# create matrix of random numbers\nrnorm(n = 1000, mean = 0, sd = 2)\n\n   [1] -2.625021791  2.516526758 -0.545499412 -1.459170420 -3.701849429\n   [6]  0.066351755 -1.503933483 -0.817431452  1.646594660 -0.051791661\n  [11]  0.680685899 -1.866171360 -0.997105958  1.539273632  1.034247809\n  [16]  2.205848106  0.058748248 -4.908301286 -2.034719923  5.046610077\n  [21] -1.976404645  0.673635422  0.591268342  4.979071928 -1.203570785\n  [26] -0.570503384 -0.406737792  1.820326779  1.095095884 -4.539653062\n  [31] -0.250514966  1.269169536  2.311401001  1.277549434  1.640825665\n  [36]  0.608238142 -1.391342201 -1.186324274  1.888561106  0.434557962\n  [41] -2.082255390 -2.743550181 -0.302656942 -0.439501435 -2.170137521\n  [46] -3.147032692  3.517709911 -1.172331994  1.539668448  0.451571645\n  [51]  1.614908286  0.024441252 -3.508409099  2.483252995 -1.019680199\n  [56] -0.119570969  1.772303501 -1.763003097 -3.041454678  0.301846579\n  [61]  4.725374028  1.762830754 -3.960750440  3.148235849 -0.115719652\n  [66]  0.663509703 -3.457201407 -2.701443620  0.935137617  1.269146564\n  [71]  1.688956881 -0.150191313 -1.619647637 -1.911950515  1.900326882\n  [76] -1.581960753  3.043799056 -1.462004537 -1.753504162 -5.314798005\n  [81]  0.337993375 -2.419490354  3.002700587  2.621842942 -0.107807365\n  [86] -2.848693139  2.233746966  1.335937712 -1.300108081 -0.933694489\n  [91] -2.855316246  0.494040257 -0.259412141  1.126764151 -4.762560439\n  [96]  0.720397669  0.032718845 -0.519939345 -3.248173569 -1.432756326\n [101] -0.411794961  3.041515231 -0.978289340 -1.640144794  2.930250987\n [106]  0.301257850 -1.579070301  0.297468625  0.115239199  0.644374339\n [111] -1.945139362 -3.288962052 -0.327936947  3.971438492  0.603948697\n [116]  0.491697716  3.777420950 -0.631144567  2.791706165  3.834829232\n [121] -2.726415248  0.584351422  0.201853799 -0.802780332 -1.500019428\n [126]  2.410378387 -0.587140997  0.837974670 -0.212177714 -0.581829713\n [131] -0.957024983 -2.196952784  4.704318130  4.350880539 -2.089157943\n [136]  4.122970002  2.712474963 -1.130339214  1.872990087 -0.069052636\n [141]  0.414595873  1.452963653 -1.187448921 -0.062564532 -3.361134042\n [146]  1.705826941  3.424688121  1.253655928  0.615464186  0.024808343\n [151]  1.420300126 -4.685168025 -1.691352149 -0.576437456  1.669577369\n [156]  0.966827458 -0.157897467  0.291132742 -1.757217725  0.194591927\n [161]  3.167762856 -1.657497988 -1.576015435 -0.725996449  0.729889049\n [166] -2.813193401  0.991799381 -0.327615032  1.097298229 -1.090217431\n [171]  2.214298222  0.419947195 -0.519094059 -1.837893271  1.849247411\n [176]  0.983559066 -2.862314111 -3.037955072 -0.379821654 -3.932995149\n [181]  3.145912057 -1.595857518 -0.179254707 -0.549791921 -0.075648803\n [186]  0.058553877 -0.687988477 -0.697817348  3.333764754  2.106585658\n [191]  1.490896002  3.024826565 -0.151322546  7.570453952  1.336842455\n [196]  0.230709093 -0.161330885  0.353257769 -1.656872924 -1.034345737\n [201] -4.098949386  1.275233848  1.297048558 -1.092997602 -1.019346022\n [206] -1.229537595 -1.545068051 -0.223926138  2.332140124 -0.819122707\n [211]  0.234924068  2.075019038  2.599168434  3.262481892  0.432793980\n [216] -4.321253795  1.588812508  0.123654343 -0.106892571 -1.031716858\n [221] -0.553809730 -0.959054711  0.871313228  0.891930309 -2.873096168\n [226]  0.417247639  4.001732206  0.345434511  0.429833557  0.463810247\n [231] -0.980186096  0.190955467  1.053852523 -1.927344636 -0.811301051\n [236]  0.644204505  0.125322996 -0.622761970  4.047739821  3.225964094\n [241] -0.284206686  1.166568381 -3.672803044 -2.235167131  2.310456956\n [246] -0.908540480 -1.054604588  2.753606329 -0.903719837 -0.759971959\n [251] -2.611446111 -0.212313498 -2.779278204 -2.412189698 -2.921447942\n [256]  0.178000063  1.482607946 -0.787197927  2.415354633 -0.588311666\n [261]  0.653054830 -0.622936498 -5.355810304  5.685002526 -1.725005499\n [266]  2.507380911 -1.676817003 -0.158159322  3.316207934  0.018419874\n [271] -2.360111715 -3.504785403  0.903985377  2.578955055 -1.941414743\n [276] -1.116275649  2.767347238 -1.129809459  0.726432409  0.411392892\n [281] -1.139998647 -2.465919305  1.812234294  2.781181759 -2.969026460\n [286] -0.631913807  1.596709914 -0.890537684 -0.680570196 -0.146874815\n [291]  0.704595268  1.134804307  1.937976637 -0.303795795 -1.236877896\n [296] -0.820760275 -1.629192749 -0.817907150 -2.620819871 -0.850098447\n [301]  0.892918870 -1.615891854  0.790709150 -0.202907506 -1.663906508\n [306] -1.053385914 -3.089936293 -5.632019906  2.821792528  1.003718093\n [311]  2.300523343 -1.917470585  0.977235152 -2.955351574  0.177730395\n [316]  0.385322043  0.361282178 -0.598110712  0.721704335 -3.209139636\n [321]  0.050243146  0.386628116 -0.061003822  0.385957653  1.306637948\n [326]  0.751861315 -1.141837523 -3.344496922  2.118468905  1.016291575\n [331] -1.113229838 -0.528995129 -1.067052900  3.715078137  0.228217393\n [336] -1.210422712  3.462293113  2.098582854  4.382639090 -0.611130319\n [341] -1.481474930 -0.548072195  1.050559758  2.210448921  1.430775080\n [346] -1.505736063 -1.020329735  0.790531594  0.044229644  1.035802722\n [351] -0.560377135  1.707951407 -1.339181126  0.251907122  0.612933303\n [356]  0.426257336 -1.109272253 -1.174757852 -1.730373822 -1.172717914\n [361] -0.927096686 -1.294920679 -1.592761202  2.491888062  2.007215591\n [366]  3.317440722  1.933643830  0.724341893 -1.869079582  0.771412309\n [371] -2.826361902 -1.334408096  0.896406754  0.039527331 -0.308582877\n [376] -0.326626466  0.445543843  1.026189640  1.673453820  0.635783765\n [381] -0.941756093  2.294007853  0.838446390 -2.447521022  3.535779895\n [386]  0.930734221  1.236610007 -0.504815693  2.335518357  2.178769999\n [391]  0.438188586  2.692490927  2.066536520 -1.414418237 -3.178756954\n [396]  1.506058644  4.713827801  0.634373543  4.809290859 -1.534536986\n [401]  0.454295358 -2.271081246 -2.671183585 -2.329146082 -0.068898797\n [406]  3.316208031 -3.511435518 -0.497146617  2.952608735  1.139641448\n [411] -0.613696171  1.971599078 -2.092946662 -0.925789266  6.582822276\n [416] -2.228638321 -1.409969238 -1.723518798 -1.114057590  2.832072978\n [421] -3.897488510 -1.968822504  0.777915324  1.027345598  4.653511683\n [426]  0.389903121 -0.497293862 -0.219185008 -0.562089484  0.341922550\n [431]  1.348606663  2.159475049 -0.681075695 -1.529910435 -2.495140130\n [436] -0.023881054 -3.080732013  1.415546478  1.099614930  1.396599753\n [441]  2.844537589  1.490703522 -1.814540359 -1.923903691  0.144228806\n [446]  1.467440151 -0.579496412  1.917579970  4.679729650 -1.349368685\n [451]  4.303658392 -0.663355081  0.878852137 -2.168827502 -0.351533229\n [456] -0.815602415 -1.703847921 -1.414510225  0.629710229  1.081243805\n [461] -0.066548699 -2.577105164 -1.070871065 -0.302543645  1.448455117\n [466]  0.452375372  3.025435296 -1.695385612 -1.147269782 -0.083981123\n [471] -2.207453160 -1.165857879 -0.376856943  2.038071223  1.800845085\n [476]  0.266159962 -2.038483208  3.774209405  3.186986285  1.193369771\n [481]  1.867239440 -1.334448665 -2.654276064 -2.738302853  0.655469416\n [486] -3.055110832 -0.040901958 -0.819885741  2.050890902  1.886841856\n [491]  1.275028891 -1.005302311 -0.759109032 -1.842137238  2.004803652\n [496] -4.183410486 -0.812753002 -0.007799288  0.444352653 -0.535447428\n [501]  0.901102707 -1.880372670  1.462410904  1.584145477  1.858450338\n [506] -0.861574311 -3.340114545  1.676379783 -0.171377559 -0.315467300\n [511] -0.301918131 -2.116613777 -2.071925493 -0.568010690 -3.259290120\n [516]  0.033023797 -2.625370240  0.190782187 -0.907318291 -2.283796836\n [521] -3.079822182 -1.910001158 -1.512781084  0.123858665 -2.139535805\n [526]  0.644611576 -2.328519295  3.871286404  0.288483902 -1.898267040\n [531] -0.150388956  2.605530514 -1.248939563  0.916876985  1.444895411\n [536]  2.492489059 -2.086707995 -1.948189139 -0.621752326  1.534509517\n [541] -1.025516091  0.111653355 -1.663742564  2.112223491 -1.348328586\n [546]  2.019949430 -2.730299029 -3.987049374  0.874349740  1.033062986\n [551] -0.308091234  3.434640312  3.678850964 -0.468194306  1.410667918\n [556] -0.603964217  1.620358949 -2.808270493  2.715933139 -0.799142229\n [561]  1.988420741  0.283756254  2.663101122 -1.186921339  2.249905554\n [566]  2.326376298  2.471534106 -0.762137225 -2.551972948 -0.145545024\n [571] -1.910731822  0.995739256 -2.490640767  0.064670674 -1.007290238\n [576] -1.398203369  0.581745617 -3.193443777 -2.068846732 -3.418807270\n [581] -2.961346406 -1.880049020  0.604927383  1.195118210  1.970255469\n [586]  0.547162603  1.856898513 -3.636110821 -1.109589807 -2.018923163\n [591]  3.404285773 -1.687695306  0.508751265 -1.471509811  2.401744321\n [596] -0.983685894  1.625744205 -1.387767305 -2.453847099 -0.765194832\n [601] -0.187094841 -2.084002165 -2.927488702  0.620912278 -3.102859147\n [606] -2.305607511  0.848570481  0.612873448  1.237320118 -1.825536514\n [611] -3.699830118  1.072838284  1.041876233 -0.847641111  1.973993995\n [616]  0.127221544  1.992408139  0.501916881 -0.484370859 -1.524552462\n [621] -2.249781081  0.470770848  0.175478571  4.068784101 -1.066498217\n [626] -1.195926424  2.423394817  0.815066786  0.103509832 -1.818007001\n [631]  0.487422865 -0.337789686 -2.528010544  1.013582350 -2.513055115\n [636]  1.263975847  0.497416355  2.708816238 -1.285656990 -3.066532465\n [641]  2.112815691 -4.569343221  1.572053620  0.198569468 -0.885335613\n [646] -1.379060259 -1.524854866 -1.033103054 -0.933821836 -2.325654351\n [651]  3.281526443  1.711591438 -1.870910584 -2.821704769  2.131632519\n [656] -0.713774366 -2.660101365  1.472476742 -0.025721436 -0.235413520\n [661] -2.827607899 -1.246301414  1.013028337 -0.924250475  2.003981810\n [666]  1.852235820  0.698888639  1.087431825  0.787930668 -0.372228113\n [671] -1.761456202 -0.211486412 -0.024219285  2.822797698  2.038771909\n [676] -1.026733937  1.843211011 -0.577204086 -3.377463206  2.265960057\n [681]  2.425438456  2.109014496 -2.449298739 -3.393101223  0.843776928\n [686] -0.070587485 -1.439029193 -0.159479630  0.582527638 -0.249372854\n [691] -1.689552441 -1.235919416 -3.157825130  1.461854162 -1.502179238\n [696]  0.775310585 -0.153858701 -1.632171701 -1.331083727  5.193483849\n [701]  0.025196688 -2.223477282 -1.202963806 -3.992572567 -0.213954891\n [706]  2.727383672 -1.609145274  2.655583811 -1.545146389  4.286890927\n [711] -2.205971581  0.467458730  1.742554643  0.172153651  0.088757723\n [716] -2.528925036 -3.412970192 -0.511163124 -0.698935476 -1.637798139\n [721] -1.939656113  0.608601652  0.662440051 -1.310819177 -0.404121405\n [726]  1.612576547 -1.827180193 -0.559390738 -1.029838645  1.267665496\n [731] -2.633524133  2.186802579 -1.793006953  1.256944992  0.096789277\n [736] -1.423198026 -0.112589721  1.213607360  1.669151621  0.067601684\n [741] -1.908886560  0.793390647  1.140106372  5.626603659 -1.189990658\n [746] -2.402955668 -0.964543663 -1.347026119  0.540156665  5.225647339\n [751] -0.838985205 -1.022337507 -0.320604458  1.120818247 -0.252870218\n [756] -0.271512216  0.440868525 -1.040393723  2.149910669  0.159338282\n [761]  0.005091040 -3.545763055 -2.134101577  2.205984545 -1.816304491\n [766]  1.048402246 -3.601455670 -3.491592951 -2.387426901  1.746603086\n [771] -0.385352199  0.093752724  3.254884347 -0.039540024 -0.320685265\n [776]  1.403035644 -1.153824107  2.291267296 -2.650235968  3.906332817\n [781] -1.128008384  2.369950856 -0.157862587  3.064874651 -0.196475611\n [786]  0.317135193 -1.854490854 -1.343479635  0.076669012 -2.789793984\n [791] -1.199963122  1.002609260  0.005225730  1.436334102  3.030315925\n [796] -0.598990241  1.907153175 -0.084102803  0.728747161 -2.352599790\n [801] -0.966218124 -1.945635485 -2.727967413  0.590088544  0.879941729\n [806]  0.325873657 -0.720351132 -1.366420039 -0.271475688 -1.128073849\n [811] -3.250272612 -0.908733261 -2.374531546 -2.321446222 -1.159345891\n [816] -0.782486628 -0.716108577 -2.703625475  0.432653529 -1.401241986\n [821]  0.501258855 -1.705271662 -3.162148223 -0.577394105  0.867426575\n [826] -0.205474517 -0.217140281  0.882353357  0.915572087 -1.412625729\n [831] -2.963469173  0.433545387  3.028986896 -0.493364595 -1.615545156\n [836]  0.641370453 -1.544563880  0.349895006 -4.038915189 -1.293712438\n [841]  2.479608810 -2.552775153  0.167684920  1.942079893 -0.037131393\n [846]  2.313802819 -2.433778770  2.728577510  0.369097847  2.324103777\n [851]  1.285810056 -0.907232362  3.901640753 -1.631458165 -0.559500999\n [856]  0.974852456 -2.111661623  1.931977083  1.843947430 -0.376101359\n [861]  3.543439423 -0.428840318 -3.329685127 -0.158980040 -3.659182298\n [866] -3.074260691  3.642683217  1.913386366 -3.740614772  0.800436578\n [871]  0.869489816  0.440988096  1.888561439  0.217461343 -3.095024458\n [876]  3.158596151  1.017340742  0.251074760  0.709099066  0.277354483\n [881]  2.081282180  2.015514823  2.016926295 -4.300163749 -2.361708993\n [886] -0.864031641  4.385686795 -0.131622683 -1.733342943 -2.272237344\n [891] -1.403504587  1.350672556 -1.759288299 -1.553896108 -0.007628941\n [896]  0.282107114  0.099221484  4.590283085 -3.421814199 -0.125212563\n [901]  1.771406491 -1.055053568 -1.241375324  2.441827694 -1.716308340\n [906] -2.208895590 -0.801387462  1.228060161  1.875391962 -0.890318462\n [911] -0.259551425 -0.521322875 -3.354029824  0.884366910 -0.167893253\n [916] -3.918264193 -1.916065613 -0.899607382 -1.123979345 -0.436757876\n [921] -0.503536552 -2.739499595  4.052323572 -1.968151273  3.421733874\n [926]  2.435542899  1.790226260 -0.591745787  1.529081144 -2.432443290\n [931]  0.096252461 -1.098859541 -0.040092368  0.734461416 -0.676578666\n [936]  0.150260459 -1.385883131 -0.466703962 -2.958911832  0.647429213\n [941]  0.407907982  0.934143178  1.780218178 -0.920226320  3.539632024\n [946] -5.717218431  1.923127813 -0.469728926  1.226479209 -6.876654120\n [951]  0.237361029 -3.322121486  2.107640319 -1.546717327 -3.254999765\n [956] -0.463818100 -1.500657231 -4.340605982  1.182505917 -0.505313513\n [961]  2.419494405  1.980136861 -0.185556420  0.471943957 -1.610407138\n [966]  0.707802915  2.151867104 -0.620461346  0.066928411 -0.482220670\n [971]  0.079965478  5.886172870  0.291187831  5.604872308 -2.412490851\n [976]  0.317047489  3.920587294  0.311597364  0.354436542  0.330519427\n [981] -0.004112329 -0.957716258  1.371353971 -1.328741588 -5.008385351\n [986] -3.175251020 -0.856646977  5.705626588 -3.059364587 -0.341308856\n [991] -2.131836752  1.763481941 -2.011118156 -0.614652820  1.687231885\n [996] -2.531418649 -0.831691538  3.668317975  2.479587611  2.019550669\n\nA &lt;- matrix(data = rnorm(n = 1000, mean = 0, sd = 2), nrow = 100, ncol = 10)\n\n# get mean over columns\napply(A, 2, mean)\n\n [1] -0.18909524  0.18230934 -0.02415149  0.17733736 -0.03594928 -0.09313992\n [7] -0.02929655 -0.07480714 -0.29656347 -0.21580544\n\n# get mean over rows\napply(A, 1, mean)\n\n  [1] -6.783149e-01  8.148453e-01  2.746500e-01  8.614152e-01  1.954073e-01\n  [6]  3.387543e-01 -4.464662e-01 -1.342302e-01 -4.565125e-01  2.688588e-01\n [11]  4.719004e-01 -1.379935e+00  1.031334e+00 -3.530315e-01  4.790226e-01\n [16] -7.255253e-01 -5.257750e-01  1.121567e-01 -3.571989e-01 -4.519015e-01\n [21]  3.808081e-01 -5.863471e-01  1.127982e-01  2.095418e-01  5.856265e-01\n [26]  4.168480e-01 -6.267831e-01  1.272329e+00  6.279684e-01 -1.460479e+00\n [31]  4.748143e-01  1.589608e+00 -6.725563e-01 -1.094222e+00 -1.190889e-01\n [36] -1.024427e+00  8.366671e-02  6.604509e-01 -1.009093e-01  1.688201e-01\n [41]  6.078102e-02 -1.326135e+00  4.818346e-01 -1.013244e+00  7.948457e-01\n [46]  9.699586e-01  4.026207e-01 -7.111648e-01 -6.540727e-01  2.275492e-01\n [51] -1.297200e+00  3.199827e-01 -6.708203e-01 -1.815908e-01  3.749194e-01\n [56] -3.929898e-01 -9.084498e-01  5.796023e-01  9.243136e-01  6.578652e-01\n [61] -2.037947e-02  1.390156e-01 -2.168762e-01  1.800344e-01 -4.850709e-01\n [66]  2.650156e-01 -9.054298e-01  4.378576e-01  5.311773e-02  1.866444e-01\n [71] -9.429095e-01 -1.063227e-01 -3.857863e-01 -4.354583e-02  3.848207e-01\n [76] -8.574806e-02 -1.323049e-01 -3.715639e-01  4.089004e-01 -1.050576e+00\n [81] -1.396767e+00  7.882894e-02 -2.386702e-05 -3.656828e-01  2.746751e-02\n [86] -5.854235e-01  7.013389e-01  3.346421e-01 -2.405658e-01 -1.685792e+00\n [91] -1.152539e-01  6.518324e-01 -5.853025e-01 -1.631906e-01  3.328253e-01\n [96]  1.391119e-01  7.892762e-01  5.889849e-01  1.219555e-01 -8.053003e-01\n\n# calculate standard deviation for each column\napply(A, 2, sd)\n\n [1] 2.139297 2.293858 2.075981 1.832828 1.951255 1.948823 2.069774 1.943261\n [9] 1.916029 1.771095\n\n\n\n\n7 Data Frames\nA data frame is a table where each column can contain elements of different types (e.g., numbers, strings). It’s the most common structure used for data sets.\n\n# Creating a data frame\nmy_data &lt;- data.frame(\n  Name = c(\"Alice\", \"Bob\", \"Charlie\"),\n  Age = c(23, 30, 25),\n  Gender = c(\"F\", \"M\", \"M\")\n)\n\nmy_data\n\n     Name Age Gender\n1   Alice  23      F\n2     Bob  30      M\n3 Charlie  25      M\n\n# Accessing columns\nmy_data$Name  # Output: \"Alice\", \"Bob\", \"Charlie\"\n\n[1] \"Alice\"   \"Bob\"     \"Charlie\"\n\n# create data frame \ndf1 &lt;- data.frame(col1 = 1:3, \n                  col2 = c(\"a\", \"b\", \"c\"), \n                  col3 = c(T, F, T), \n                  col4 = c(as.Date(\"2020-01-01\"), as.Date(\"2020-01-03\"), as.Date(\"2020-01-03\")))\n\n# create data frame - vectors\ncol1 &lt;- seq(10,100,10)\ncol2 &lt;- seq(as.Date(\"2020-01-01\"), length = 10, by = \"weeks\")\ncol3 &lt;- rep(\"word\", 10)\n\ndf2 &lt;- data.frame(num = col1,\n                  date = col2,\n                  string = col3)\n\n# check DF structure\nstr(df2)\n\n'data.frame':   10 obs. of  3 variables:\n $ num   : num  10 20 30 40 50 60 70 80 90 100\n $ date  : Date, format: \"2020-01-01\" \"2020-01-08\" ...\n $ string: chr  \"word\" \"word\" \"word\" \"word\" ...\n\n# create data frame - matrix\nM &lt;- matrix(data = 1:100, nrow = 10, ncol = 10, byrow = T)\nrownames(M) &lt;- paste(\"row\", 1:10, sep = \"\")\ncolnames(M) &lt;- paste(\"col\", 1:10, sep = \"\")\nM\n\n      col1 col2 col3 col4 col5 col6 col7 col8 col9 col10\nrow1     1    2    3    4    5    6    7    8    9    10\nrow2    11   12   13   14   15   16   17   18   19    20\nrow3    21   22   23   24   25   26   27   28   29    30\nrow4    31   32   33   34   35   36   37   38   39    40\nrow5    41   42   43   44   45   46   47   48   49    50\nrow6    51   52   53   54   55   56   57   58   59    60\nrow7    61   62   63   64   65   66   67   68   69    70\nrow8    71   72   73   74   75   76   77   78   79    80\nrow9    81   82   83   84   85   86   87   88   89    90\nrow10   91   92   93   94   95   96   97   98   99   100\n\ndf3 &lt;- as.data.frame(M)\ndf3\n\n      col1 col2 col3 col4 col5 col6 col7 col8 col9 col10\nrow1     1    2    3    4    5    6    7    8    9    10\nrow2    11   12   13   14   15   16   17   18   19    20\nrow3    21   22   23   24   25   26   27   28   29    30\nrow4    31   32   33   34   35   36   37   38   39    40\nrow5    41   42   43   44   45   46   47   48   49    50\nrow6    51   52   53   54   55   56   57   58   59    60\nrow7    61   62   63   64   65   66   67   68   69    70\nrow8    71   72   73   74   75   76   77   78   79    80\nrow9    81   82   83   84   85   86   87   88   89    90\nrow10   91   92   93   94   95   96   97   98   99   100\n\n# check DF dimensions\ndim(df3)\n\n[1] 10 10\n\nnrow(df3)\n\n[1] 10\n\nncol(df3)\n\n[1] 10\n\n# check DF type / class\nclass(df3)\n\n[1] \"data.frame\"\n\ntypeof(df3)\n\n[1] \"list\"\n\n# Accessing DF\n\n# let's create DF - employees\ndf_emp &lt;- data.frame(id = 1:6,\n                     name = c(\"Max\", \"Jane\", \"John\", \"Tony\", \"Janis\", \"Helen\"),\n                     surname = c(\"Gordon\", \"Smith\", \"Don\", \"Price\", \"Jett\", \"Dust\"),\n                     age = c(55, 35, 46, 22, 60, 27),\n                     date_start_work = c(as.Date(\"1985-09-01\"), as.Date(\"2010-10-01\"), as.Date(\"1999-06-01\"), as.Date(\"2019-03-01\"), as.Date(\"1980-04-15\"), as.Date(\"2015-02-20\")),\n                     gender = c(\"M\", \"F\", \"M\", \"M\", \"F\", \"M\"),\n                     manager_position = c(T, F, F, F, T, F)\n                     )\n\n# extract data as data frame (one column) - []\ndf_extr &lt;- df_emp[\"name\"]\ndf_extr\n\n   name\n1   Max\n2  Jane\n3  John\n4  Tony\n5 Janis\n6 Helen\n\nclass(df_extr)\n\n[1] \"data.frame\"\n\n# extract data as vector (one column) [[]] $\ndf_extr &lt;- df_emp[[\"age\"]]\ndf_extr\n\n[1] 55 35 46 22 60 27\n\nclass(df_extr) # vector factor\n\n[1] \"numeric\"\n\ndf_extr &lt;- df_emp$age\ndf_extr\n\n[1] 55 35 46 22 60 27\n\nclass(df_extr) # vector factor\n\n[1] \"numeric\"\n\n# extract multiple columns\ndf_extr &lt;- df_emp[c(\"name\", \"age\")]\ndf_extr\n\n   name age\n1   Max  55\n2  Jane  35\n3  John  46\n4  Tony  22\n5 Janis  60\n6 Helen  27\n\n# data frame slicing\ndf_emp\n\n  id  name surname age date_start_work gender manager_position\n1  1   Max  Gordon  55      1985-09-01      M             TRUE\n2  2  Jane   Smith  35      2010-10-01      F            FALSE\n3  3  John     Don  46      1999-06-01      M            FALSE\n4  4  Tony   Price  22      2019-03-01      M            FALSE\n5  5 Janis    Jett  60      1980-04-15      F             TRUE\n6  6 Helen    Dust  27      2015-02-20      M            FALSE\n\n#extract second row in name column (1 cell)\ndf_emp[2,2]\n\n[1] \"Jane\"\n\ndf_emp[2,\"name\"]\n\n[1] \"Jane\"\n\n# extract first 4 rows of last 2 columns \ndf_emp[1:4, 6:7]\n\n  gender manager_position\n1      M             TRUE\n2      F            FALSE\n3      M            FALSE\n4      M            FALSE\n\ndf_emp[1:4, c(\"gender\", \"manager_position\")]\n\n  gender manager_position\n1      M             TRUE\n2      F            FALSE\n3      M            FALSE\n4      M            FALSE\n\n# extract first column (all rows)\ndf_emp[,1]\n\n[1] 1 2 3 4 5 6\n\ndf_emp[,\"id\"]\n\n[1] 1 2 3 4 5 6\n\ndf_emp$id\n\n[1] 1 2 3 4 5 6\n\n# extract last 2 rows (all columns) \ndf_emp[5:6,]\n\n  id  name surname age date_start_work gender manager_position\n5  5 Janis    Jett  60      1980-04-15      F             TRUE\n6  6 Helen    Dust  27      2015-02-20      M            FALSE\n\ncols &lt;- colnames(df_emp)\ndf_emp[5:6, cols]\n\n  id  name surname age date_start_work gender manager_position\n5  5 Janis    Jett  60      1980-04-15      F             TRUE\n6  6 Helen    Dust  27      2015-02-20      M            FALSE\n\n# Modifying data frame\n\n# append column \ndf_emp &lt;- cbind(df_emp, role = c(\"director\", \"secretary\", \"analyst\", \"researcher\", \"CEO\", \"analyst\"))\ndf_emp$new_col &lt;- 1\n\n# append rows \ndf_emp &lt;- rbind(df_emp, list(7, \"Mark\", \"Jax\", 32, as.Date(\"2020-01-01\"), \"M\", F, \"researcher\", 1))\n\n# problem with factor variables (new values not in factor levels)\n# easy solution - append new row as data frame (rbind 2 data frames)!!! \n# will show few rows later\n\n# remove column\ndf_emp$new_col &lt;- NULL\n\n# remove row\ndf_emp &lt;- df_emp[-7,]\n\n# merge two data frames (row wise)\ndf_new_emp &lt;- data.frame(id = 7,\n                         name = \"Mark\",\n                         surname = \"Jax\",\n                         age = 32,\n                         date_start_work = as.Date(\"2020-01-01\"),\n                         gender = \"M\",\n                         manager_position = F,\n                         role = \"researcher\")\n\ndf_emp &lt;- rbind(df_emp, df_new_emp)\n\n# merge two data frames (column wise)\ndf_attr &lt;- data.frame(eye_color = c(\"blue\", \"green\", \"brown\", \"hazel\", \"blue\", \"brown\", \"brown\"),\n                      hair_color = c(\"blonde\", \"light brown\", \"black\", \"brown\", \"blonde\", \"dark brown\", \"brown\"))\ndf_emp &lt;- cbind(df_emp, df_attr)\n\n\n# Tips\n\n# Df summary\nsummary(df_emp)\n\n       id          name             surname               age       \n Min.   :1.0   Length:7           Length:7           Min.   :22.00  \n 1st Qu.:2.5   Class :character   Class :character   1st Qu.:29.50  \n Median :4.0   Mode  :character   Mode  :character   Median :35.00  \n Mean   :4.0                                         Mean   :39.57  \n 3rd Qu.:5.5                                         3rd Qu.:50.50  \n Max.   :7.0                                         Max.   :60.00  \n date_start_work         gender          manager_position     role          \n Min.   :1980-04-15   Length:7           Mode :logical    Length:7          \n 1st Qu.:1992-07-16   Class :character   FALSE:5          Class :character  \n Median :2010-10-01   Mode  :character   TRUE :2          Mode  :character  \n Mean   :2004-05-06                                                         \n 3rd Qu.:2017-02-24                                                         \n Max.   :2020-01-01                                                         \n  eye_color          hair_color       \n Length:7           Length:7          \n Class :character   Class :character  \n Mode  :character   Mode  :character  \n                                      \n                                      \n                                      \n\n# rows subsetting\nsubset(x = df_emp, gender == \"M\")\n\n  id  name surname age date_start_work gender manager_position       role\n1  1   Max  Gordon  55      1985-09-01      M             TRUE   director\n3  3  John     Don  46      1999-06-01      M            FALSE    analyst\n4  4  Tony   Price  22      2019-03-01      M            FALSE researcher\n6  6 Helen    Dust  27      2015-02-20      M            FALSE    analyst\n7  7  Mark     Jax  32      2020-01-01      M            FALSE researcher\n  eye_color hair_color\n1      blue     blonde\n3     brown      black\n4     hazel      brown\n6     brown dark brown\n7     brown      brown\n\nsubset(x = df_emp, gender == \"F\" & manager_position == T)\n\n  id  name surname age date_start_work gender manager_position role eye_color\n5  5 Janis    Jett  60      1980-04-15      F             TRUE  CEO      blue\n  hair_color\n5     blonde\n\nrows &lt;- which(df_emp[,\"gender\"] == \"M\")\ndf_emp[rows,]\n\n  id  name surname age date_start_work gender manager_position       role\n1  1   Max  Gordon  55      1985-09-01      M             TRUE   director\n3  3  John     Don  46      1999-06-01      M            FALSE    analyst\n4  4  Tony   Price  22      2019-03-01      M            FALSE researcher\n6  6 Helen    Dust  27      2015-02-20      M            FALSE    analyst\n7  7  Mark     Jax  32      2020-01-01      M            FALSE researcher\n  eye_color hair_color\n1      blue     blonde\n3     brown      black\n4     hazel      brown\n6     brown dark brown\n7     brown      brown\n\nrows &lt;- which(df_emp[,\"gender\"] == \"F\" & df_emp[,\"manager_position\"] == T)\ndf_emp[rows,]\n\n  id  name surname age date_start_work gender manager_position role eye_color\n5  5 Janis    Jett  60      1980-04-15      F             TRUE  CEO      blue\n  hair_color\n5     blonde\n\n# some calculations regarding data frames\nnr_managers &lt;- sum(df_emp$manager_position)\nmean_age &lt;- mean(df_emp$age)\ndf_emp$name_surname &lt;- paste(df_emp$name, df_emp$surname, sep = \" \") # merge name and surname\n\n# use apply to sum over columns (age, manager_position)\napply(df_emp[,c(\"age\", \"manager_position\")], 2, sum)\n\n             age manager_position \n             277                2 \n\n\n\n\n8 Factors\nFactors are used to represent categorical data. They store both the data values and the corresponding levels.\n\ngender_factor &lt;- factor(c(\"Male\", \"Female\", \"Male\"))\n\n# Display the factor and its levels\nprint(gender_factor)\nlevels(gender_factor)\n\n\n# create factor variable (gender)\ngender &lt;- factor(x = c(\"male\", \"female\", \"female\"))\n\n# check new variable\ngender\nstr(gender)\nclass(gender)\ntypeof(gender)\n\n# create with ordering\ngender &lt;- factor(x = c(\"male\", \"female\", \"female\"), ordered = T)\nis.ordered(gender)\n\n# check levels\nlevels(gender) # order of levels based on variable (string alphabetic order)\n\n# we can define our own levels (custom levels order)\ngender &lt;- factor(x = c(\"male\", \"female\", \"female\"), levels = c(\"male\", \"female\"), ordered = F)\ngender\nlevels(gender)\n\n# factor properties\nlevels(gender)\nis.factor(gender)\nis.ordered(gender)\n\n# create other object to factor\nstrings &lt;- c(\"a\", \"b\", \"a\", \"c\")\nf_strings &lt;- factor(strings)\n\n#f_string\n\n\n\n9 Arrays\nArrays are similar to matrices but can have more than two dimensions.\n\n# Creating a 3-dimensional array\nmy_array &lt;- array(1:24, dim = c(3, 4, 2))\n\n# Accessing elements\nmy_array[1, 2, 1]  # Access the element in the first dimension, second row, and first slice\n\n[1] 4\n\n\n\n\n10 Summary\n\nVector: One-dimensional, homogeneous.\nList: One-dimensional, heterogeneous.\nMatrix: Two-dimensional, homogeneous.\nData Frame: Two-dimensional, heterogeneous (columns can be different types).\nFactor: Categorical data representation.\nArray: Multi-dimensional, homogeneous.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Data Types & Data Structures</span>"
    ]
  },
  {
    "objectID": "03-manipulating-vectors-dataframes-lists.html",
    "href": "03-manipulating-vectors-dataframes-lists.html",
    "title": "4  Manipulating Vectors, Data Frames, and Lists",
    "section": "",
    "text": "5 Vectors: Indexing & Vectorized Ops\n#Creating vector\nx=1:10\nx=10:1\nx=-5:10\nx=c(1:10)\nx=c(-5:10)\nx=c(1,2,3,4,5,6,7,8,9,10)\n\n# Naming a vector\na=c(1:3)\nnames(a) #Returns null\n\nNULL\n\nnames(a)=c(\"one\",\"two\",\"three\")\nnames(a)\n\n[1] \"one\"   \"two\"   \"three\"\n\na\n\n  one   two three \n    1     2     3 \n\n#2)Accessing vector element\nx=c(1,3,5,7)\nx[2]\n\n[1] 3\n\nx[c(1,3)]\n\n[1] 1 5\n\nx[-2]\n\n[1] 1 5 7\n\nx[-c(1,3)]\n\n[1] 3 7\n\nx[0]\n\nnumeric(0)\n\ny=x[10]\nclass(y)\n\n[1] \"numeric\"\n\n#Note: X[0],x[10],output is numeric class only\n#************************************\n#3)Modification of Vector elements\nx=c(9,3,5,7)\nx[2]=13\nx[-c(2,3)]=c(11,17)\nx[-1]=c(110,170,70)\n\n#****************************\nx=c(11,3,5,7)\nx[9]=x[7]\n#****************************\nx=c(11,3,5,7)\nx[9]=x[2]\n\nx=c(1,3,5,7)\nx[2]=x[11] \n#****************************\nx=c(1,3,5,7)\nx[c(2,5)]=x[c(4,4)] # It assign 4 element of to 2nd element and 4th element to 5th element \n#****************************           from x=1,3,5,7\nx=c(11,3,5,7)\nx[c(2,7)]=x[c(1,3)]\n\nx=c(1,3,5,7)\nx[c(2,3)]=x[c(1,10)]\n\n#4)Airthematic Operations on Vector\nx=c(1,3,5,7)\nx+10\n\n[1] 11 13 15 17\n\nx-5\n\n[1] -4 -2  0  2\n\nx*10\n\n[1] 10 30 50 70\n\nx/10\n\n[1] 0.1 0.3 0.5 0.7\n\nx=c(1,3,5,7)\nx%/%2\n\n[1] 0 1 2 3\n\nx=c(1,3,5,7)\nx%%2\n\n[1] 1 1 1 1\n\nmin(x)\n\n[1] 1\n\nmax(x)\n\n[1] 7\n\nmedian(x)\n\n[1] 4\n\nmean(x)\n\n[1] 4\n\nrange(x)\n\n[1] 1 7\n\nvar(x)\n\n[1] 6.666667\n\nsd(x)\n\n[1] 2.581989\n\nquantile(x)\n\n  0%  25%  50%  75% 100% \n 1.0  2.5  4.0  5.5  7.0 \n\nquantile(1:20,probs=c(.25,0.9))\n\n  25%   90% \n 5.75 18.10 \n\nIQR(x)\n\n[1] 3\n\n#5)\"WHICH\" function\nx=c(2,3,4,5,11,112,133,33)\nx&gt;5\n\n[1] FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE\n\nx=c(2,3,4,5,11,112,133,33)\ny=which(x&gt;5) #Returns the position,not values\ny=x[which(x&gt;5)]\ny=x[x&gt;5]\n\nx=c(2,3,4,5,11,112,133,33)\nmin(x)\n\n[1] 2\n\nwhich(x==min(x))\n\n[1] 1\n\nx[which(x==min(x))]#Returns the  value\n\n[1] 2\n\nwhich.min(x)#Returns the position,not values\n\n[1] 1\n\nx=c(2,3,4,5,11,112,133,33)\nmax(x)\n\n[1] 133\n\nwhich(x==max(x)) #Returns the position,not values\n\n[1] 7\n\nx[which(x==max(x))]#Returns the  value\n\n[1] 133\n\nwhich.max(x)#Returns the position,not values\n\n[1] 7\n\nx=c(8,7,4,5,11,112,133,33)\nwhich(x&gt;2 & x&lt;5)\n\n[1] 3\n\nx[which(x&gt;2 & x&lt;5)]\n\n[1] 4\n\nx=c(8,7,4,5,11,112,133,33)\nwhich(x&gt;7 | x&lt;12)\n\n[1] 1 2 3 4 5 6 7 8\n\nx[which(x&gt;7 | x&lt;12)]\n\n[1]   8   7   4   5  11 112 133  33\n\n#6)\"REP\" function\nx=rep(1:5,times=10)\nx=rep(100,times=10)\nx=rep(c(3,6),times=4)\nx=rep(\"Kummam\",times=5)\nx=rep(c(\"Ramesh\",\"Kummam\"),times=3)\nx=rep(1:4,5:8)\n#x=rep(1:4,1:2) #output as invalid argument\nx=rep(1:4,c(2,3,5,7))\nx=rep(1:4,each=3)\nx=rep(1:4,each=2,times=3)\n\n#7)\"SEQ\" function\nx=seq(from=1,to=10,by=3)\n#x=seq(from=1,to=10,by=-3) # wrong arguments\nx=seq(from=10,to=1,by=-3)\nx=seq(from=1,to=10,length=100)\nx=seq(from=1,by=2,length=100)\ny=seq(from=1,by=3,length=50)\nz=c(x,y)\n\n#8)seq_len() & seq_along() functions\nx=c(8,7,4,5,11,112,133,33)\nlength(x)\n\n[1] 8\n\nseq_len(length(x))\n\n[1] 1 2 3 4 5 6 7 8\n\nseq_along(x) #Returns length of the object\n\n[1] 1 2 3 4 5 6 7 8\n\n#9) Dealing with missing values\nx=c(11,3,5,7)\nx[2]=NA\nx[c(2,3)]=NA\nis.na(x) #Output is a logical vector\n\n[1] FALSE  TRUE  TRUE FALSE\n\nx[!is.na(x)]\n\n[1] 11  7\n\nna.omit(x)\n\n[1] 11  7\nattr(,\"na.action\")\n[1] 2 3\nattr(,\"class\")\n[1] \"omit\"\n\n#Note: Observe the below operations carefully\nx=c(1,NA,5,NA)\n#x==NA # not followed it so far\n#x[x==NA]# not followed it so far\n    \n\n#10) Naming a vector\nx=c(1:3)\nnames(x)=c(\"a\",\"b\",\"c\")\nx[c(\"a\",\"b\")]\n\na b \n1 2 \n\ny=c(\"Ramesh\",\"Kummam\")\nnames(y)=c(\"First\",\"Last\")\ny[c(\"Last\",\"First\")]\n\n    Last    First \n\"Kummam\" \"Ramesh\" \n\n#9) Checking the availability of elements in a vector\na=c(1:10)\nb=c(5:15)\n1 %in% a\n\n[1] TRUE\n\n1 %in% b\n\n[1] FALSE\n\na %in% b\n\n [1] FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n\nb %in% a\n\n [1]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE\n\nis.element(a,b)\n\n [1] FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n\nis.element(b,a)\n\n [1]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE\n\n# print strings\nprint(\"string\")\n\n[1] \"string\"\n\n# concatenate strings \"a\" + \"b\" = \"ab\"\npaste(\"a\", \"b\", sep = \"\")\n\n[1] \"ab\"\n\n# paste objects of different length\npaste(\"i\", 1:10, sep =\".\")\n\n [1] \"i.1\"  \"i.2\"  \"i.3\"  \"i.4\"  \"i.5\"  \"i.6\"  \"i.7\"  \"i.8\"  \"i.9\"  \"i.10\"\n\npaste(c(\"i\",\"j\", \"k\"), 1:10, sep =\".\")\n\n [1] \"i.1\"  \"j.2\"  \"k.3\"  \"i.4\"  \"j.5\"  \"k.6\"  \"i.7\"  \"j.8\"  \"k.9\"  \"i.10\"\n\n# paste with collapsing\npaste(c(\"i\",\"j\", \"k\"), 1:3, sep = \"\", collapse = \"\")\n\n[1] \"i1j2k3\"\n\n# paste withour collapsing\npaste(c(\"i\",\"j\", \"k\"), 1:3, sep = \"\")\n\n[1] \"i1\" \"j2\" \"k3\"\n\n# paste0() shorter version of paste(..., sep =\"\")\npaste0(\"Hello\", \"world\", \",\", \"I\", \"use\", \"R\")\n\n[1] \"Helloworld,IuseR\"\n\npaste(\"Hello\", \"world\", \",\", \"I\", \"use\", \"R\", sep =\" \")\n\n[1] \"Hello world , I use R\"\n\n# concatenate strings with cat()\ncat(\"Hello\", \"world\", \"!\")\n\nHello world !\n\n# it prints withoute \"\" quotes !!!\ncat(\"Hello\", \"world\", \"!\", sep = \"/\")\n\nHello/world/!\n\n# counting number of characters nchar()\nnchar(\"Hello world\")\n\n[1] 11\n\n# load US states names from data frame regarding crime rate\ndf &lt;- USArrests\nhead(df)\n\n           Murder Assault UrbanPop Rape\nAlabama      13.2     236       58 21.2\nAlaska       10.0     263       48 44.5\nArizona       8.1     294       80 31.0\nArkansas      8.8     190       50 19.5\nCalifornia    9.0     276       91 40.6\nColorado      7.9     204       78 38.7\n\nrownames(df)\n\n [1] \"Alabama\"        \"Alaska\"         \"Arizona\"        \"Arkansas\"      \n [5] \"California\"     \"Colorado\"       \"Connecticut\"    \"Delaware\"      \n [9] \"Florida\"        \"Georgia\"        \"Hawaii\"         \"Idaho\"         \n[13] \"Illinois\"       \"Indiana\"        \"Iowa\"           \"Kansas\"        \n[17] \"Kentucky\"       \"Louisiana\"      \"Maine\"          \"Maryland\"      \n[21] \"Massachusetts\"  \"Michigan\"       \"Minnesota\"      \"Mississippi\"   \n[25] \"Missouri\"       \"Montana\"        \"Nebraska\"       \"Nevada\"        \n[29] \"New Hampshire\"  \"New Jersey\"     \"New Mexico\"     \"New York\"      \n[33] \"North Carolina\" \"North Dakota\"   \"Ohio\"           \"Oklahoma\"      \n[37] \"Oregon\"         \"Pennsylvania\"   \"Rhode Island\"   \"South Carolina\"\n[41] \"South Dakota\"   \"Tennessee\"      \"Texas\"          \"Utah\"          \n[45] \"Vermont\"        \"Virginia\"       \"Washington\"     \"West Virginia\" \n[49] \"Wisconsin\"      \"Wyoming\"       \n\nstates &lt;- rownames(df) \n\n# convert all states names to upper case\nstates_upper &lt;- toupper(states)\n\n# convert all names to lower\nstates_lower &lt;- tolower(states)\n\n# or select which to apply with function casefol\ncasefold(x = states, upper = T)\n\n [1] \"ALABAMA\"        \"ALASKA\"         \"ARIZONA\"        \"ARKANSAS\"      \n [5] \"CALIFORNIA\"     \"COLORADO\"       \"CONNECTICUT\"    \"DELAWARE\"      \n [9] \"FLORIDA\"        \"GEORGIA\"        \"HAWAII\"         \"IDAHO\"         \n[13] \"ILLINOIS\"       \"INDIANA\"        \"IOWA\"           \"KANSAS\"        \n[17] \"KENTUCKY\"       \"LOUISIANA\"      \"MAINE\"          \"MARYLAND\"      \n[21] \"MASSACHUSETTS\"  \"MICHIGAN\"       \"MINNESOTA\"      \"MISSISSIPPI\"   \n[25] \"MISSOURI\"       \"MONTANA\"        \"NEBRASKA\"       \"NEVADA\"        \n[29] \"NEW HAMPSHIRE\"  \"NEW JERSEY\"     \"NEW MEXICO\"     \"NEW YORK\"      \n[33] \"NORTH CAROLINA\" \"NORTH DAKOTA\"   \"OHIO\"           \"OKLAHOMA\"      \n[37] \"OREGON\"         \"PENNSYLVANIA\"   \"RHODE ISLAND\"   \"SOUTH CAROLINA\"\n[41] \"SOUTH DAKOTA\"   \"TENNESSEE\"      \"TEXAS\"          \"UTAH\"          \n[45] \"VERMONT\"        \"VIRGINIA\"       \"WASHINGTON\"     \"WEST VIRGINIA\" \n[49] \"WISCONSIN\"      \"WYOMING\"       \n\ncasefold(x = states, upper = F)\n\n [1] \"alabama\"        \"alaska\"         \"arizona\"        \"arkansas\"      \n [5] \"california\"     \"colorado\"       \"connecticut\"    \"delaware\"      \n [9] \"florida\"        \"georgia\"        \"hawaii\"         \"idaho\"         \n[13] \"illinois\"       \"indiana\"        \"iowa\"           \"kansas\"        \n[17] \"kentucky\"       \"louisiana\"      \"maine\"          \"maryland\"      \n[21] \"massachusetts\"  \"michigan\"       \"minnesota\"      \"mississippi\"   \n[25] \"missouri\"       \"montana\"        \"nebraska\"       \"nevada\"        \n[29] \"new hampshire\"  \"new jersey\"     \"new mexico\"     \"new york\"      \n[33] \"north carolina\" \"north dakota\"   \"ohio\"           \"oklahoma\"      \n[37] \"oregon\"         \"pennsylvania\"   \"rhode island\"   \"south carolina\"\n[41] \"south dakota\"   \"tennessee\"      \"texas\"          \"utah\"          \n[45] \"vermont\"        \"virginia\"       \"washington\"     \"west virginia\" \n[49] \"wisconsin\"      \"wyoming\"       \n\n# character translation\nchartr(old = \"o\", new = \"0\", x = \"Hello World\")\n\n[1] \"Hell0 W0rld\"\n\n# sorting strings \nsort(states, decreasing = F) #ascending order\n\n [1] \"Alabama\"        \"Alaska\"         \"Arizona\"        \"Arkansas\"      \n [5] \"California\"     \"Colorado\"       \"Connecticut\"    \"Delaware\"      \n [9] \"Florida\"        \"Georgia\"        \"Hawaii\"         \"Idaho\"         \n[13] \"Illinois\"       \"Indiana\"        \"Iowa\"           \"Kansas\"        \n[17] \"Kentucky\"       \"Louisiana\"      \"Maine\"          \"Maryland\"      \n[21] \"Massachusetts\"  \"Michigan\"       \"Minnesota\"      \"Mississippi\"   \n[25] \"Missouri\"       \"Montana\"        \"Nebraska\"       \"Nevada\"        \n[29] \"New Hampshire\"  \"New Jersey\"     \"New Mexico\"     \"New York\"      \n[33] \"North Carolina\" \"North Dakota\"   \"Ohio\"           \"Oklahoma\"      \n[37] \"Oregon\"         \"Pennsylvania\"   \"Rhode Island\"   \"South Carolina\"\n[41] \"South Dakota\"   \"Tennessee\"      \"Texas\"          \"Utah\"          \n[45] \"Vermont\"        \"Virginia\"       \"Washington\"     \"West Virginia\" \n[49] \"Wisconsin\"      \"Wyoming\"       \n\nsort(states, decreasing = T) #descending order\n\n [1] \"Wyoming\"        \"Wisconsin\"      \"West Virginia\"  \"Washington\"    \n [5] \"Virginia\"       \"Vermont\"        \"Utah\"           \"Texas\"         \n [9] \"Tennessee\"      \"South Dakota\"   \"South Carolina\" \"Rhode Island\"  \n[13] \"Pennsylvania\"   \"Oregon\"         \"Oklahoma\"       \"Ohio\"          \n[17] \"North Dakota\"   \"North Carolina\" \"New York\"       \"New Mexico\"    \n[21] \"New Jersey\"     \"New Hampshire\"  \"Nevada\"         \"Nebraska\"      \n[25] \"Montana\"        \"Missouri\"       \"Mississippi\"    \"Minnesota\"     \n[29] \"Michigan\"       \"Massachusetts\"  \"Maryland\"       \"Maine\"         \n[33] \"Louisiana\"      \"Kentucky\"       \"Kansas\"         \"Iowa\"          \n[37] \"Indiana\"        \"Illinois\"       \"Idaho\"          \"Hawaii\"        \n[41] \"Georgia\"        \"Florida\"        \"Delaware\"       \"Connecticut\"   \n[45] \"Colorado\"       \"California\"     \"Arkansas\"       \"Arizona\"       \n[49] \"Alaska\"         \"Alabama\"       \n\n# extracting parts of string\n# sub string first 3 letters from state name Alabama\nsubstr(x = \"Alabama\", start = 1, stop = 3)\n\n[1] \"Ala\"\n\n# String matching - back to toy example\nhelp(regex)\n\n# get all country names\n#install.packages(\"countrycode\")\nrequire(countrycode)\n\nLoading required package: countrycode\n\ncountries &lt;- as.vector(countrycode::codelist$country.name.en)\n\n# countries beginning with letter \"A\"\ngrep(pattern = \"^A\", x = countries)\n\n [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16\n\ncountries[grep(pattern = \"^A\", x = countries)]\n\n [1] \"Afghanistan\"       \"Albania\"           \"Algeria\"          \n [4] \"American Samoa\"    \"Andorra\"           \"Angola\"           \n [7] \"Anguilla\"          \"Antarctica\"        \"Antigua & Barbuda\"\n[10] \"Argentina\"         \"Armenia\"           \"Aruba\"            \n[13] \"Australia\"         \"Austria\"           \"Austria-Hungary\"  \n[16] \"Azerbaijan\"       \n\ncountries[grepl(pattern = \"^A\", x = countries)]\n\n [1] \"Afghanistan\"       \"Albania\"           \"Algeria\"          \n [4] \"American Samoa\"    \"Andorra\"           \"Angola\"           \n [7] \"Anguilla\"          \"Antarctica\"        \"Antigua & Barbuda\"\n[10] \"Argentina\"         \"Armenia\"           \"Aruba\"            \n[13] \"Australia\"         \"Austria\"           \"Austria-Hungary\"  \n[16] \"Azerbaijan\"       \n\n# all country names that end with letter \"y\"\nrez &lt;- grep(pattern = \"*y$\", x = countries)\ncountries[rez]\n\n [1] \"Austria-Hungary\"                \"British Indian Ocean Territory\"\n [3] \"Germany\"                        \"Guernsey\"                      \n [5] \"Hungary\"                        \"Italy\"                         \n [7] \"Jersey\"                         \"Norway\"                        \n [9] \"Paraguay\"                       \"Saxony\"                        \n[11] \"St. Barthélemy\"                 \"Turkey\"                        \n[13] \"Tuscany\"                        \"Uruguay\"                       \n[15] \"Vatican City\"                  \n\n# all country with 2 words or more for a country name\nrez &lt;- grep(pattern = \"\\\\w\\\\s\\\\w\", x = countries)\ncountries[rez]\n\n [1] \"American Samoa\"                            \n [2] \"Bouvet Island\"                             \n [3] \"British Indian Ocean Territory\"            \n [4] \"British Virgin Islands\"                    \n [5] \"Burkina Faso\"                              \n [6] \"Cape Verde\"                                \n [7] \"Caribbean Netherlands\"                     \n [8] \"Cayman Islands\"                            \n [9] \"Central African Republic\"                  \n[10] \"Channel Islands\"                           \n[11] \"Christmas Island\"                          \n[12] \"Cook Islands\"                              \n[13] \"Costa Rica\"                                \n[14] \"Côte d’Ivoire\"                             \n[15] \"Dominican Republic\"                        \n[16] \"El Salvador\"                               \n[17] \"Equatorial Guinea\"                         \n[18] \"Falkland Islands\"                          \n[19] \"Faroe Islands\"                             \n[20] \"French Guiana\"                             \n[21] \"French Polynesia\"                          \n[22] \"French Southern Territories\"               \n[23] \"German Democratic Republic\"                \n[24] \"Heard & McDonald Islands\"                  \n[25] \"Hesse Electoral\"                           \n[26] \"Hesse Grand Ducal\"                         \n[27] \"Hong Kong SAR China\"                       \n[28] \"Isle of Man\"                               \n[29] \"Macao SAR China\"                           \n[30] \"Marshall Islands\"                          \n[31] \"Mecklenburg Schwerin\"                      \n[32] \"Micronesia (Federated States of)\"          \n[33] \"Netherlands Antilles\"                      \n[34] \"New Caledonia\"                             \n[35] \"New Zealand\"                               \n[36] \"Norfolk Island\"                            \n[37] \"North Korea\"                               \n[38] \"North Macedonia\"                           \n[39] \"Northern Mariana Islands\"                  \n[40] \"Orange Free State\"                         \n[41] \"Palestinian Territories\"                   \n[42] \"Papua New Guinea\"                          \n[43] \"Pitcairn Islands\"                          \n[44] \"Puerto Rico\"                               \n[45] \"Republic of Vietnam\"                       \n[46] \"Saint Martin (French part)\"                \n[47] \"San Marino\"                                \n[48] \"Saudi Arabia\"                              \n[49] \"Serbia and Montenegro\"                     \n[50] \"Sierra Leone\"                              \n[51] \"Sint Maarten\"                              \n[52] \"Solomon Islands\"                           \n[53] \"South Africa\"                              \n[54] \"South Georgia & South Sandwich Islands\"    \n[55] \"South Korea\"                               \n[56] \"South Sudan\"                               \n[57] \"Sri Lanka\"                                 \n[58] \"Svalbard & Jan Mayen\"                      \n[59] \"São Tomé & Príncipe\"                       \n[60] \"Turks & Caicos Islands\"                    \n[61] \"Two Sicilies\"                              \n[62] \"U.S. Virgin Islands\"                       \n[63] \"United Arab Emirates\"                      \n[64] \"United Arab Republic\"                      \n[65] \"United Kingdom\"                            \n[66] \"United Province CA\"                        \n[67] \"United States\"                             \n[68] \"United States Minor Outlying Islands (the)\"\n[69] \"Vatican City\"                              \n[70] \"Western Sahara\"                            \n[71] \"Yemen Arab Republic\"                       \n[72] \"Yemen People's Republic\"                   \n[73] \"Åland Islands\"                             \n\n# all country names that end with letter \"e\" or \"i\"\nrez &lt;- grep(pattern = \"*e$|*i$\", x = countries)\ncountries[rez]\n\n [1] \"Belize\"              \"Brunei\"              \"Burundi\"            \n [4] \"Cape Verde\"          \"Chile\"               \"Congo - Brazzaville\"\n [7] \"Côte d’Ivoire\"       \"Djibouti\"            \"Eswatini\"           \n[10] \"Fiji\"                \"France\"              \"Greece\"             \n[13] \"Guadeloupe\"          \"Haiti\"               \"Kiribati\"           \n[16] \"Malawi\"              \"Mali\"                \"Martinique\"         \n[19] \"Mayotte\"             \"Mozambique\"          \"Niue\"               \n[22] \"Orange Free State\"   \"Sierra Leone\"        \"Singapore\"          \n[25] \"Suriname\"            \"São Tomé & Príncipe\" \"Timor-Leste\"        \n[28] \"Ukraine\"             \"Zimbabwe\"           \n\n# all country names which contain combination of letters “gin” \nrez &lt;- grep(pattern = \"*(gin)\", x = countries)\ncountries[rez]\n\n[1] \"British Virgin Islands\" \"U.S. Virgin Islands\"   \n\n# metacharacters and double backslash sign\nstrings &lt;- c(\"dollar $\", \"dollar\", \"US dollar\")\n\n# how to escape metacharacters in R\n# we would like to match a word with \"$\" dollar sign\nstrings\n\n[1] \"dollar $\"  \"dollar\"    \"US dollar\"\n\nrez1 &lt;- grep(pattern = \"$\", x = strings) # wrong way all are find $ indicating end of string\nstrings[rez1]\n\n[1] \"dollar $\"  \"dollar\"    \"US dollar\"\n\n# we need to escape $ with \\ backslash\n#rez2 &lt;- grep(pattern = \"\\$\", x = strings) # wrong way error\n#strings[rez2]\n\n# right way $ escape with \\\\ double backslash\n#rez3 &lt;- grep(pattern = \"\\\\$\", x = strings) # wrong way error\n#strings[rez3]\n\n# Escape dot .\nstrings &lt;-c(\"word.word\", \"word word\")\nrez &lt;- grep(pattern = \"\\\\.\", x = strings)\nstrings[rez]\n\n[1] \"word.word\"\n\n# the hat sign beginning of the string and dollar sign end of string\nstrings &lt;- c(\"Word\", \"worD\")\nstrings[grep(\"^W\",strings)]\n\n[1] \"Word\"\n\nstrings[grep(\"D$\",strings)]\n\n[1] \"worD\"\n\n# example of an anchor sequences in R\nstrings &lt;- c(\"123\", \"onetwothree\", \"1twothree\")\nstrings[grep(\"\\\\d\", strings)] # digit character\n\n[1] \"123\"       \"1twothree\"\n\nstrings[grep(\"\\\\D\", strings)] # non-digit character\n\n[1] \"onetwothree\" \"1twothree\"  \n\n# example of a character classes\nstrings &lt;- c(\"123\", \"dollar\", \"shkjl\")\nstrings[grep(\"[aeiou]\", strings)] # match word with any vovel\n\n[1] \"dollar\"\n\nstrings[grep(\"[0-9]\", strings)] # match word with digits\n\n[1] \"123\"\n\n# find and replace sub() & gsub()\nstring &lt;- \"I have started to learn R, and I already love R.\"\n\n# replace \"R\" with \"X\"\nsub(pattern = \"R\", replacement = \"X\", x = string) #only first occurence replaced\n\n[1] \"I have started to learn X, and I already love R.\"\n\ngsub(pattern = \"R\", replacement = \"X\", x = string) #all occurences replaced\n\n[1] \"I have started to learn X, and I already love X.\"\n\n#replace white space with blank space\ngsub(pattern = \"\\\\s\", replacement = \"\", x = string)\n\n[1] \"IhavestartedtolearnR,andIalreadyloveR.\"\n\n# string split, split given sentence by comma \",\"\nstrsplit(x = string, split = \",\")\n\n[[1]]\n[1] \"I have started to learn R\" \" and I already love R.\"   \n\n# split phone numbers by digits\nnumbers &lt;- c(\"310-555-123\", \"311-444-456\")\nstrsplit(x = numbers, split = \"-\")\n\n[[1]]\n[1] \"310\" \"555\" \"123\"\n\n[[2]]\n[1] \"311\" \"444\" \"456\"",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Manipulating Vectors, Data Frames, and Lists</span>"
    ]
  },
  {
    "objectID": "03-manipulating-vectors-dataframes-lists.html#innter-join",
    "href": "03-manipulating-vectors-dataframes-lists.html#innter-join",
    "title": "4  Manipulating Vectors, Data Frames, and Lists",
    "section": "16.1 innter join",
    "text": "16.1 innter join\ninner_join(): returns only rows with matching patient IDs in both data frames.\n\n# Inner join on patient_id\ninner_join(patients, lab_results, by = \"patient_id\")\n\n  patient_id age gender        test           result\n1        103  29      M         CBC           Normal\n2        104  56      F Lipid Panel High Cholesterol\n\n\nIn this example, only patients with patient_ids 103 and 104 are in both tables, so only their information appears in the result.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Manipulating Vectors, Data Frames, and Lists</span>"
    ]
  },
  {
    "objectID": "03-manipulating-vectors-dataframes-lists.html#left-join",
    "href": "03-manipulating-vectors-dataframes-lists.html#left-join",
    "title": "4  Manipulating Vectors, Data Frames, and Lists",
    "section": "16.2 left join",
    "text": "16.2 left join\nleft_join() returns all rows from the patients data frame and matches rows from lab_results where possible. Unmatched rows in lab_results are filled with NA.\n\n# Left join on patient_id\nleft_join(patients, lab_results, by = \"patient_id\")\n\n  patient_id age gender        test           result\n1        101  34      F        &lt;NA&gt;             &lt;NA&gt;\n2        102  45      M        &lt;NA&gt;             &lt;NA&gt;\n3        103  29      M         CBC           Normal\n4        104  56      F Lipid Panel High Cholesterol\n\n\nHere, all patients from patients are included, with NA for lab results where no match is found.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Manipulating Vectors, Data Frames, and Lists</span>"
    ]
  },
  {
    "objectID": "03-manipulating-vectors-dataframes-lists.html#right-join",
    "href": "03-manipulating-vectors-dataframes-lists.html#right-join",
    "title": "4  Manipulating Vectors, Data Frames, and Lists",
    "section": "16.3 right join",
    "text": "16.3 right join\nright_join() returns all rows from lab_results, matching rows from patients where possible. Unmatched rows in patients are filled withNA.\n\n# Right join on patient_id\nright_join(patients, lab_results, by = \"patient_id\")\n\n  patient_id age gender          test           result\n1        103  29      M           CBC           Normal\n2        104  56      F   Lipid Panel High Cholesterol\n3        105  NA   &lt;NA&gt; Blood Glucose         Elevated\n4        106  NA   &lt;NA&gt;           CBC           Normal\n\n\nIn this example, all patients with lab results are included, with demographic data from patients where available.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Manipulating Vectors, Data Frames, and Lists</span>"
    ]
  },
  {
    "objectID": "03-manipulating-vectors-dataframes-lists.html#full-join",
    "href": "03-manipulating-vectors-dataframes-lists.html#full-join",
    "title": "4  Manipulating Vectors, Data Frames, and Lists",
    "section": "16.4 Full Join",
    "text": "16.4 Full Join\nfull_join() returns all rows from both tables, with NA for missing matches in either table.\n\n# Full join on patient_id\nfull_join(patients, lab_results, by = \"patient_id\")\n\n  patient_id age gender          test           result\n1        101  34      F          &lt;NA&gt;             &lt;NA&gt;\n2        102  45      M          &lt;NA&gt;             &lt;NA&gt;\n3        103  29      M           CBC           Normal\n4        104  56      F   Lipid Panel High Cholesterol\n5        105  NA   &lt;NA&gt; Blood Glucose         Elevated\n6        106  NA   &lt;NA&gt;           CBC           Normal",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Manipulating Vectors, Data Frames, and Lists</span>"
    ]
  },
  {
    "objectID": "03-manipulating-vectors-dataframes-lists.html#semi-join",
    "href": "03-manipulating-vectors-dataframes-lists.html#semi-join",
    "title": "4  Manipulating Vectors, Data Frames, and Lists",
    "section": "16.5 Semi Join",
    "text": "16.5 Semi Join\nsemi_join() returns only the rows in patients that have a match in lab_results, without bringing in columns from lab_results.\n\n# Semi join on patient_id\nsemi_join(patients, lab_results, by = \"patient_id\")\n\n  patient_id age gender\n1        103  29      M\n2        104  56      F\n\n\nOnly patients with lab results are included here (patients 103 and 104).",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Manipulating Vectors, Data Frames, and Lists</span>"
    ]
  },
  {
    "objectID": "03-manipulating-vectors-dataframes-lists.html#anti-join",
    "href": "03-manipulating-vectors-dataframes-lists.html#anti-join",
    "title": "4  Manipulating Vectors, Data Frames, and Lists",
    "section": "16.6 Anti join",
    "text": "16.6 Anti join\nanti_join() returns only the rows in patients that do not have a match in lab_results.\n\n# Anti join on patient_id\nanti_join(patients, lab_results, by = \"patient_id\")\n\n  patient_id age gender\n1        101  34      F\n2        102  45      M\n\n#example\ntab_a &lt;- data.frame(\n  id=c(001,002,003,004),\n  age=c(25,50,30,40)\n)\n\ntab_b &lt;- data.frame(\n  id=c(001,002,004,005),\n  sex=c(\"M\",\"F\",\"M\",\"F\")\n)\n\n#inner join: \ninjointab &lt;- dplyr::inner_join(tab_a,tab_b,by=\"id\")\n#full join:\nfulljointab &lt;- full_join(tab_a,tab_b,by=\"id\")\n#left join\nleftjointab &lt;- left_join(x=tab_a,y=tab_b,by=\"id\")\n#right join\nrighjointab &lt;- right_join(x=tab_a,y=tab_b,by=\"id\")\n#anti_join\nantijointab &lt;- anti_join(x=tab_a,y=tab_b,by=\"id\")\nantijointab1 &lt;- anti_join(x=tab_b,y=tab_a,by=\"id\")",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Manipulating Vectors, Data Frames, and Lists</span>"
    ]
  },
  {
    "objectID": "04-reading-sas.html",
    "href": "04-reading-sas.html",
    "title": "5  Reading SAS Datasets (+ Cleaning)",
    "section": "",
    "text": "5.1 Handling Labels & Missing\nWe try to read a SAS dataset (e.g., SDTM DM). If not present, we synthesize an example.\n# Example: Convert blank strings \"\" to NA for character columns\nconvert_blanks_to_na &lt;- function(x) {\n  if (is.character(x)) x[x == \"\"] &lt;- NA_character_\n  x\n}\ndm &lt;- dm |&gt; mutate(across(where(is.character), convert_blanks_to_na))",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Reading SAS Datasets (+ Cleaning)</span>"
    ]
  },
  {
    "objectID": "04-reading-sas.html#labelled-to-factor-if-needed",
    "href": "04-reading-sas.html#labelled-to-factor-if-needed",
    "title": "5  Reading SAS Datasets (+ Cleaning)",
    "section": "5.2 Labelled to Factor (if needed)",
    "text": "5.2 Labelled to Factor (if needed)\n\nif (inherits(dm$SEX, \"labelled\")) {\n  dm &lt;- dm |&gt; mutate(SEX = to_factor(SEX))\n}",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Reading SAS Datasets (+ Cleaning)</span>"
    ]
  },
  {
    "objectID": "04-reading-sas.html#common-cleaning",
    "href": "04-reading-sas.html#common-cleaning",
    "title": "5  Reading SAS Datasets (+ Cleaning)",
    "section": "5.3 Common Cleaning",
    "text": "5.3 Common Cleaning\n\ndm &lt;- dm |&gt;\n  mutate(\n    AGEGR1 = cut(AGE, breaks=c(-Inf, 50, 65, Inf),\n                 labels=c(\"&lt;50\",\"50-65\", \"65+\"))\n  )",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Reading SAS Datasets (+ Cleaning)</span>"
    ]
  },
  {
    "objectID": "05-base-functions.html",
    "href": "05-base-functions.html",
    "title": "6  Base R Functions & Apply Family",
    "section": "",
    "text": "7 Common Utilities\n\nx &lt;- 1:10\nsum(x); mean(x); sd(x); var(x); quantile(x)\n\n[1] 55\n\n\n[1] 5.5\n\n\n[1] 3.02765\n\n\n[1] 9.166667\n\n\n   0%   25%   50%   75%  100% \n 1.00  3.25  5.50  7.75 10.00 \n\nseq(0, 1, by=0.1); rep(5, times=3)\n\n [1] 0.0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0\n\n\n[1] 5 5 5\n\n\n\n\n8 Apply Family\n\nm &lt;- matrix(1:9, nrow=3)\napply(m, 1, mean)  # row means\n\n[1] 4 5 6\n\napply(m, 2, mean)  # col means\n\n[1] 2 5 8\n\nlst &lt;- list(a=1:3, b=10:12)\nsapply(lst, mean)   # simplifies result\n\n a  b \n 2 11 \n\nmapply(sum, 1:3, 10:12)\n\n[1] 11 13 15\n\n\n\n\n9 Subsetting Essentials\n\ndf &lt;- data.frame(id=1:3, val=c(10,20,30))\ndf[1, \"val\"]\n\n[1] 10\n\ndf[df$val &gt; 10, ]\n\n  id val\n2  2  20\n3  3  30\n\n\n\n\n10 Exercises\n\nUse apply to get the max per column of a numeric matrix.\nWrite a base R snippet to compute IQR for each column of mtcars.\nCompare lapply vs sapply in behavior on a list with mixed types.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Base R Functions & Apply Family</span>"
    ]
  },
  {
    "objectID": "06-custom-functions-validation.html",
    "href": "06-custom-functions-validation.html",
    "title": "7  Custom Functions & Validation",
    "section": "",
    "text": "8 Writing Functions\n\nsafe_mean &lt;- function(x, na.rm = TRUE) {\n  stopifnot(is.numeric(x))\n  mean(x, na.rm = na.rm)\n}\nsafe_mean(c(1, 2, NA))\n\n[1] 1.5\n\n\n\n\n9 Error Handling\n\nrobust_divide &lt;- function(a, b) {\n  tryCatch(a / b,\n           warning = function(w) NA_real_,\n           error   = function(e) NA_real_)\n}\nrobust_divide(10, 0)\n\n[1] Inf\n\n\n\n\n10 Unit Testing with testthat\nInstall once: install.packages(c(\"testthat\",\"devtools\",\"usethis\",\"roxygen2\"))\n\nusethis::use_testthat()\nusethis::use_test(\"safe_mean\")\n\nCreate tests/testthat/test-safe_mean.R:\n\ntestthat::test_that(\"safe_mean works\", {\n  x &lt;- c(1,2,NA)\n  testthat::expect_equal(safe_mean(x), 1.5)\n  testthat::expect_error(safe_mean(\"oops\"))\n})\n\nTest passed 😸\n\n\n\n\n11 Document with roxygen2\n\n#' Compute a safe mean\n#' @param x Numeric vector\n#' @param na.rm Logical; remove NAs\n#' @return Numeric scalar\n#' @examples\n#' safe_mean(c(1,2,NA))\n#' @export\nsafe_mean &lt;- function(x, na.rm = TRUE) {\n  stopifnot(is.numeric(x))\n  mean(x, na.rm = na.rm)\n}\n\nRun:\n\ndevtools::document()\n\n\n\n12 Exercises\n\nWrite winsorize(x, probs=c(0.05,0.95)) and test it.\nCreate validate_columns(df, required=c(\"USUBJID\",\"AGE\")) and add tests.\nAdd roxygen docs and build help pages.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Custom Functions & Validation</span>"
    ]
  },
  {
    "objectID": "07-package-development.html",
    "href": "07-package-development.html",
    "title": "8  R Package Development",
    "section": "",
    "text": "8.1 Setup\ninstall.packages(c(\"usethis\",\"devtools\",\"testthat\",\"roxygen2\",\"pkgdown\"))",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>R Package Development</span>"
    ]
  },
  {
    "objectID": "07-package-development.html#create-a-package",
    "href": "07-package-development.html#create-a-package",
    "title": "8  R Package Development",
    "section": "8.2 Create a Package",
    "text": "8.2 Create a Package\n\nusethis::create_package(\"mypkg\")\n# In the new project:\nusethis::use_mit_license(\"Your Name\")\nusethis::use_git()\nusethis::use_github()   # optional\nusethis::use_roxygen_md()\nusethis::use_testthat()\nusethis::use_package(\"dplyr\")   # adds to DESCRIPTION",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>R Package Development</span>"
    ]
  },
  {
    "objectID": "07-package-development.html#add-a-function",
    "href": "07-package-development.html#add-a-function",
    "title": "8  R Package Development",
    "section": "8.3 Add a Function",
    "text": "8.3 Add a Function\nCreate R/safe_mean.R and its tests (see previous chapter).",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>R Package Development</span>"
    ]
  },
  {
    "objectID": "07-package-development.html#build-install-check",
    "href": "07-package-development.html#build-install-check",
    "title": "8  R Package Development",
    "section": "8.4 Build, Install, Check",
    "text": "8.4 Build, Install, Check\n\ndevtools::document()\ndevtools::build()\ndevtools::install()\ndevtools::check()",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>R Package Development</span>"
    ]
  },
  {
    "objectID": "07-package-development.html#vignette-website",
    "href": "07-package-development.html#vignette-website",
    "title": "8  R Package Development",
    "section": "8.5 Vignette & Website",
    "text": "8.5 Vignette & Website\n\nusethis::use_vignette(\"intro\")\nusethis::use_pkgdown()\npkgdown::build_site()\n\nExercise: Package-ize a small utility set (convert_blanks_to_na, validate_columns, etc.) with docs and tests.",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>R Package Development</span>"
    ]
  },
  {
    "objectID": "08-git-rstudio.html",
    "href": "08-git-rstudio.html",
    "title": "9  Git in RStudio (Setup & Auth)",
    "section": "",
    "text": "9.1 One-Time Setup\nusethis::use_git_config(user.name = \"Your Name\", user.email = \"you@example.com\")",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Git in RStudio (Setup & Auth)</span>"
    ]
  },
  {
    "objectID": "08-git-rstudio.html#one-time-setup",
    "href": "08-git-rstudio.html#one-time-setup",
    "title": "9  Git in RStudio (Setup & Auth)",
    "section": "",
    "text": "Install Git and ensure git --version works.\nIn R:",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Git in RStudio (Setup & Auth)</span>"
    ]
  },
  {
    "objectID": "08-git-rstudio.html#initialize-git-for-the-current-project",
    "href": "08-git-rstudio.html#initialize-git-for-the-current-project",
    "title": "9  Git in RStudio (Setup & Auth)",
    "section": "9.2 Initialize Git for the Current Project",
    "text": "9.2 Initialize Git for the Current Project\n\nusethis::use_git()",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Git in RStudio (Setup & Auth)</span>"
    ]
  },
  {
    "objectID": "08-git-rstudio.html#connect-to-github",
    "href": "08-git-rstudio.html#connect-to-github",
    "title": "9  Git in RStudio (Setup & Auth)",
    "section": "9.3 Connect to GitHub",
    "text": "9.3 Connect to GitHub\n\nCreate a GitHub account.\nIn R:\n\n\nusethis::create_github_token()\ngitcreds::gitcreds_set()  # paste token when prompted\nusethis::use_github(protocol = \"https\")\n\nOr set up SSH keys via RStudio (Tools &gt; Global Options &gt; Git/SVN).",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Git in RStudio (Setup & Auth)</span>"
    ]
  },
  {
    "objectID": "08-git-rstudio.html#typical-workflow",
    "href": "08-git-rstudio.html#typical-workflow",
    "title": "9  Git in RStudio (Setup & Auth)",
    "section": "9.4 Typical Workflow",
    "text": "9.4 Typical Workflow\n\nStage changes (Git pane in RStudio).\nCommit with a clear message.\nPush to origin (GitHub).",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Git in RStudio (Setup & Auth)</span>"
    ]
  },
  {
    "objectID": "08-git-rstudio.html#remove-git-from-a-project-macosrstudio",
    "href": "08-git-rstudio.html#remove-git-from-a-project-macosrstudio",
    "title": "9  Git in RStudio (Setup & Auth)",
    "section": "9.5 Remove Git from a Project (macOS/RStudio)",
    "text": "9.5 Remove Git from a Project (macOS/RStudio)\n\nIn Finder/Terminal, delete the hidden .git folder in the project root (careful!).\nOr from Terminal at project root:\n\nrm -rf .git\n\nReopen project in RStudio; Git pane will disappear.\n\nExercises - Create a new repo for this Quarto course and push it. - Branch, make a change, open a Pull Request on GitHub.",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Git in RStudio (Setup & Auth)</span>"
    ]
  },
  {
    "objectID": "09-adam-adsl.html",
    "href": "09-adam-adsl.html",
    "title": "10  Creating ADaM: ADSL from SDTM-like Inputs",
    "section": "",
    "text": "10.1 Build ADSL\nWe simulate minimal SDTM-like DM and EX to illustrate ADSL creation. If available, replace with your own data/sdtm/*.sas7bdat.\nadsl &lt;- dm |&gt;\n  left_join(ex, by=\"USUBJID\") |&gt;\n  transmute(\n    STUDYID, USUBJID,\n    TRT01P = ARM,\n    TRT01PN = as.integer(factor(ARM, levels=c(\"Placebo\",\"Active\"))),\n    AGE, SEX,\n    RANDDT,\n    TRTSDT = EXSTDTC,\n    TRT01A = TRT01P,          # assume planned == actual for demo\n    TRT01AN = TRT01PN\n  )\nadsl\n\n# A tibble: 10 × 10\n   STUDYID USUBJID TRT01P  TRT01PN   AGE SEX   RANDDT     TRTSDT     TRT01A \n   &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;     &lt;int&gt; &lt;dbl&gt; &lt;chr&gt; &lt;date&gt;     &lt;date&gt;     &lt;chr&gt;  \n 1 XYZ123  XYZ-001 Placebo       1    55 M     2025-01-18 2025-01-18 Placebo\n 2 XYZ123  XYZ-002 Active        2    62 F     2025-01-30 2025-01-30 Active \n 3 XYZ123  XYZ-003 Placebo       1    47 M     2025-01-15 2025-01-15 Placebo\n 4 XYZ123  XYZ-004 Active        2    50 F     2025-01-26 2025-01-28 Active \n 5 XYZ123  XYZ-005 Placebo       1    71 M     2025-01-31 2025-02-03 Placebo\n 6 XYZ123  XYZ-006 Active        2    66 F     2025-02-01 2025-02-03 Active \n 7 XYZ123  XYZ-007 Placebo       1    45 M     2025-02-04 2025-02-07 Placebo\n 8 XYZ123  XYZ-008 Active        2    59 F     2025-01-15 2025-01-16 Active \n 9 XYZ123  XYZ-009 Placebo       1    53 M     2025-01-19 2025-01-20 Placebo\n10 XYZ123  XYZ-010 Active        2    68 F     2025-01-19 2025-01-19 Active \n# ℹ 1 more variable: TRT01AN &lt;int&gt;\nExercises 1. Add analysis populations (e.g., SAFFL, FASFL) based on simple rules. 2. Derive AGEGR1 as &lt;65 / ≥65 and use ordered factor. 3. Add a treatment end date TRTEDT and compute treatment duration.",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Creating ADaM: ADSL from SDTM-like Inputs</span>"
    ]
  },
  {
    "objectID": "09-adam-adsl.html#build-adsl",
    "href": "09-adam-adsl.html#build-adsl",
    "title": "10  Creating ADaM: ADSL from SDTM-like Inputs",
    "section": "",
    "text": "Note: Real ADSL creation must follow ADaM IG (derive flags, dates, imputations, populations). This example is educational only.",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Creating ADaM: ADSL from SDTM-like Inputs</span>"
    ]
  },
  {
    "objectID": "10-tlf.html",
    "href": "10-tlf.html",
    "title": "11  TLFs: Table, Figure, Listing",
    "section": "",
    "text": "11.1 Table 1: Baseline Characteristics by Treatment\nWe reuse adsl from the previous chapter (or synthesize if missing).\ntbl1 &lt;- adsl |&gt;\n  group_by(TRT01P) |&gt;\n  summarise(\n    N = dplyr::n(),\n    mean_age = mean(AGE, na.rm=TRUE),\n    sd_age = sd(AGE, na.rm=TRUE),\n    pct_female = mean(SEX == \"F\")*100\n  )\n\ngt(tbl1) |&gt;\n  tab_header(title = \"Table 1. Baseline Characteristics by Treatment\") |&gt;\n  fmt_number(columns = c(mean_age, sd_age, pct_female), decimals = 1)\n\n\n\n\n\n\n\nTable 1. Baseline Characteristics by Treatment\n\n\nTRT01P\nN\nmean_age\nsd_age\npct_female\n\n\n\n\nActive\n24\n59.4\n8.1\n50.0\n\n\nPlacebo\n36\n61.7\n5.6\n61.1",
    "crumbs": [
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>TLFs: Table, Figure, Listing</span>"
    ]
  },
  {
    "objectID": "10-tlf.html#figure-toy-survival-curve",
    "href": "10-tlf.html#figure-toy-survival-curve",
    "title": "11  TLFs: Table, Figure, Listing",
    "section": "11.2 Figure: (Toy) Survival Curve",
    "text": "11.2 Figure: (Toy) Survival Curve\nWe simulate time-to-event data for illustration only.\n\nset.seed(42)\nn &lt;- nrow(adsl)\nadsl$time &lt;- rexp(n, rate = ifelse(adsl$TRT01P==\"Active\", 0.08, 0.1))\nadsl$status &lt;- rbinom(n, 1, 0.7)\nfit &lt;- survival::survfit(survival::Surv(time, status) ~ TRT01P, data = adsl)\n\n# Quick GGplot\nggsurv &lt;- function(fit) {\n  # rebuild data for plotting\n  ss &lt;- summary(fit)\n  dd &lt;- data.frame(\n    time = ss$time,\n    surv = ss$surv,\n    strata = rep(names(fit$strata), fit$strata)\n  )\n  ggplot(dd, aes(x=time, y=surv, linetype=strata)) +\n    geom_step() +\n    labs(title=\"Kaplan–Meier (Toy Data)\", x=\"Time\", y=\"Survival Probability\", linetype=\"Treatment\") +\n    theme_minimal()\n}\n#ggsurv(fit)",
    "crumbs": [
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>TLFs: Table, Figure, Listing</span>"
    ]
  },
  {
    "objectID": "10-tlf.html#listing-subject-level-listing",
    "href": "10-tlf.html#listing-subject-level-listing",
    "title": "11  TLFs: Table, Figure, Listing",
    "section": "11.3 Listing: Subject-Level Listing",
    "text": "11.3 Listing: Subject-Level Listing\n\nlst &lt;- adsl |&gt;\n  arrange(USUBJID) |&gt;\n  select(USUBJID, TRT01P, AGE, SEX) |&gt;\n  head(20)\n\ngt(lst) |&gt;\n  tab_header(title = \"Listing: First 20 Subjects\")\n\n\n\n\n\n\n\nListing: First 20 Subjects\n\n\nUSUBJID\nTRT01P\nAGE\nSEX\n\n\n\n\nXYZ-001\nPlacebo\n63\nF\n\n\nXYZ-002\nPlacebo\n58\nM\n\n\nXYZ-003\nPlacebo\n67\nM\n\n\nXYZ-004\nActive\n67\nM\n\n\nXYZ-005\nPlacebo\n67\nM\n\n\nXYZ-006\nActive\n66\nF\n\n\nXYZ-007\nActive\n64\nF\n\n\nXYZ-008\nActive\n60\nM\n\n\nXYZ-009\nPlacebo\n58\nM\n\n\nXYZ-010\nPlacebo\n57\nF\n\n\nXYZ-011\nActive\n54\nF\n\n\nXYZ-012\nActive\n58\nM\n\n\nXYZ-013\nActive\n50\nM\n\n\nXYZ-014\nPlacebo\n77\nF\n\n\nXYZ-015\nActive\n70\nF\n\n\nXYZ-016\nPlacebo\n51\nM\n\n\nXYZ-017\nActive\n57\nM\n\n\nXYZ-018\nPlacebo\n56\nF\n\n\nXYZ-019\nPlacebo\n66\nM\n\n\nXYZ-020\nPlacebo\n59\nF\n\n\n\n\n\n\n\nExercises 1. Format Table 1 to N (mean ± SD) for age. 2. Add risk table to the KM plot (use an extension like survminer outside of this minimal example). 3. Create a listing that includes population flags once you derive them.",
    "crumbs": [
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>TLFs: Table, Figure, Listing</span>"
    ]
  },
  {
    "objectID": "11-capstone.html",
    "href": "11-capstone.html",
    "title": "12  Capstone: End-to-End Mini Workflow",
    "section": "",
    "text": "12.1 Parameters\nThis chapter ties everything together: read data → derive ADSL → produce TLFs → render a report.\n# You could parametrize paths via YAML; here we keep inline defaults.\ndm_path &lt;- \"data/sdtm/dm.sas7bdat\"\nex_path &lt;- \"data/sdtm/ex.sas7bdat\"",
    "crumbs": [
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Capstone: End-to-End Mini Workflow</span>"
    ]
  },
  {
    "objectID": "11-capstone.html#read-or-synthesize-sdtm",
    "href": "11-capstone.html#read-or-synthesize-sdtm",
    "title": "12  Capstone: End-to-End Mini Workflow",
    "section": "12.2 1) Read (or Synthesize) SDTM",
    "text": "12.2 1) Read (or Synthesize) SDTM\n\nlibrary(haven); library(dplyr); library(lubridate)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n\n\nAttaching package: 'lubridate'\n\n\nThe following objects are masked from 'package:base':\n\n    date, intersect, setdiff, union\n\nif (file.exists(dm_path)) {\n  dm &lt;- read_sas(dm_path)\n} else {\n  dm &lt;- tibble::tibble(\n    STUDYID = \"XYZ123\",\n    USUBJID = sprintf(\"XYZ-%03d\", 1:60),\n    ARM = sample(c(\"Placebo\",\"Active\"), 60, replace=TRUE),\n    AGE = round(rnorm(60, 60, 8)),\n    SEX = sample(c(\"M\",\"F\"), 60, replace=TRUE),\n    RANDDT = as.Date(\"2025-01-15\") + sample(0:40, 60, replace=TRUE)\n  )\n}\nif (file.exists(ex_path)) {\n  ex &lt;- read_sas(ex_path)\n} else {\n  ex &lt;- tibble::tibble(\n    USUBJID = dm$USUBJID,\n    EXSTDTC = dm$RANDDT + sample(0:3, nrow(dm), replace=TRUE)\n  )\n}",
    "crumbs": [
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Capstone: End-to-End Mini Workflow</span>"
    ]
  },
  {
    "objectID": "11-capstone.html#derive-adsl-minimal-demo",
    "href": "11-capstone.html#derive-adsl-minimal-demo",
    "title": "12  Capstone: End-to-End Mini Workflow",
    "section": "12.3 2) Derive ADSL (Minimal Demo)",
    "text": "12.3 2) Derive ADSL (Minimal Demo)\n\nadsl &lt;- dm |&gt;\n  left_join(ex, by=\"USUBJID\") |&gt;\n  mutate(\n    TRT01P = ARM,\n    TRT01PN = as.integer(factor(ARM, levels=c(\"Placebo\",\"Active\"))),\n    TRT01A = TRT01P,\n    TRT01AN = TRT01PN,\n    SAFFL = \"Y\",          # demo only; define rules in real life\n    FASFL = \"Y\"\n  ) |&gt;\n  dplyr::select(STUDYID.x, USUBJID, TRT01P, TRT01PN, TRT01A, TRT01AN, AGE, SEX, EXSTDTC, SAFFL, FASFL)",
    "crumbs": [
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Capstone: End-to-End Mini Workflow</span>"
    ]
  },
  {
    "objectID": "11-capstone.html#tlfs",
    "href": "11-capstone.html#tlfs",
    "title": "12  Capstone: End-to-End Mini Workflow",
    "section": "12.4 3) TLFs",
    "text": "12.4 3) TLFs\n\nlibrary(gt); library(ggplot2); library(survival)\n\ntbl1 &lt;- adsl |&gt;\n  group_by(TRT01P) |&gt;\n  summarise(N=n(),\n            mean_age = mean(AGE), sd_age = sd(AGE),\n            pct_female = mean(SEX==\"F\")*100)\ntbl1_gt &lt;- gt(tbl1) |&gt; tab_header(title=\"Table 1. Baseline by Treatment\")\ntbl1_gt\n\n\n\n\n\n\n\nTable 1. Baseline by Treatment\n\n\nDescription of Planned Arm\nN\nmean_age\nsd_age\npct_female\n\n\n\n\nPlacebo\n226\n75.04867\n8.503715\n60.61947\n\n\nScreen Failure\n52\n75.09615\n9.699928\n69.23077\n\n\nXanomeline High Dose\n184\n74.01087\n7.939656\n48.36957\n\n\nXanomeline Low Dose\n181\n75.29834\n8.277778\n60.77348\n\n\n\n\n\n\n\n\nset.seed(123)\nadsl$time &lt;- rexp(nrow(adsl), rate=ifelse(adsl$TRT01P==\"Active\", 0.08, 0.1))\nadsl$status &lt;- rbinom(nrow(adsl), 1, 0.7)\nfit &lt;- survfit(Surv(time, status) ~ TRT01P, data=adsl)\n# reuse plotting function from prior chapter\nggsurv &lt;- function(fit) {\n  ss &lt;- summary(fit)\n  dd &lt;- data.frame(time=ss$time, surv=ss$surv, strata=rep(names(fit$strata), fit$strata))\n  ggplot(dd, aes(x=time, y=surv, linetype=strata)) + geom_step() + theme_minimal() +\n    labs(title=\"KM Curve (Toy)\", x=\"Time\", y=\"Survival\", linetype=\"Treatment\")\n}\n#ggsurv(fit)",
    "crumbs": [
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Capstone: End-to-End Mini Workflow</span>"
    ]
  },
  {
    "objectID": "11-capstone.html#save-outputs",
    "href": "11-capstone.html#save-outputs",
    "title": "12  Capstone: End-to-End Mini Workflow",
    "section": "12.5 4) Save Outputs",
    "text": "12.5 4) Save Outputs\n\n# Example: Save Table 1 as PNG\n#gtsave(tbl1_gt, \"tlf-table1.png\")\n\nChallenge: Convert this chapter into a parameterized report (e.g., treatment subset or different cohort) and render multiple outputs.",
    "crumbs": [
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Capstone: End-to-End Mini Workflow</span>"
    ]
  },
  {
    "objectID": "12-appendix.html",
    "href": "12-appendix.html",
    "title": "13  Appendix: Tips, Profiles, .libPaths",
    "section": "",
    "text": "13.1 Useful Profiles\nCreate ~/.Rprofile to set options (be careful on shared systems):",
    "crumbs": [
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Appendix: Tips, Profiles, .libPaths</span>"
    ]
  },
  {
    "objectID": "12-appendix.html#useful-profiles",
    "href": "12-appendix.html#useful-profiles",
    "title": "13  Appendix: Tips, Profiles, .libPaths",
    "section": "",
    "text": "options(\n  repos = c(CRAN = \"https://cloud.r-project.org\"),\n  scipen = 999\n)",
    "crumbs": [
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Appendix: Tips, Profiles, .libPaths</span>"
    ]
  },
  {
    "objectID": "12-appendix.html#custom-library-paths",
    "href": "12-appendix.html#custom-library-paths",
    "title": "13  Appendix: Tips, Profiles, .libPaths",
    "section": "13.2 Custom Library Paths",
    "text": "13.2 Custom Library Paths\n# In .Rprofile or project-level .Rprofile\n.libPaths(c(\"/path/to/Rlibs\", .libPaths()))",
    "crumbs": [
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Appendix: Tips, Profiles, .libPaths</span>"
    ]
  },
  {
    "objectID": "12-appendix.html#format-vs-formatc-quick-recap",
    "href": "12-appendix.html#format-vs-formatc-quick-recap",
    "title": "13  Appendix: Tips, Profiles, .libPaths",
    "section": "13.3 Format vs formatC (quick recap)",
    "text": "13.3 Format vs formatC (quick recap)\n\nx &lt;- c(123.456, 0.00123456)\nformat(x, digits = 4)\n\n[1] \"1.235e+02\" \"1.235e-03\"\n\nformat(x, nsmall = 2)\n\n[1] \"1.23456e+02\" \"1.23456e-03\"\n\nformatC(x, digits = 3, format = \"f\")\n\n[1] \"123.456\" \"0.001\"",
    "crumbs": [
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Appendix: Tips, Profiles, .libPaths</span>"
    ]
  },
  {
    "objectID": "12-appendix.html#posixct-vs-posixlt",
    "href": "12-appendix.html#posixct-vs-posixlt",
    "title": "13  Appendix: Tips, Profiles, .libPaths",
    "section": "13.4 POSIXct vs POSIXlt",
    "text": "13.4 POSIXct vs POSIXlt\n\nPOSIXct: seconds since epoch (numeric), compact, fast.\nPOSIXlt: list-like with components (year, mon, mday…), easier to extract parts.",
    "crumbs": [
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Appendix: Tips, Profiles, .libPaths</span>"
    ]
  },
  {
    "objectID": "12-appendix.html#recommended-packages",
    "href": "12-appendix.html#recommended-packages",
    "title": "13  Appendix: Tips, Profiles, .libPaths",
    "section": "13.5 Recommended Packages",
    "text": "13.5 Recommended Packages\n\ntidyverse, lubridate, janitor, gt, gtsummary, survival, broom, here.\nPharma/CDISC: admiral, tlf/tern, pharmaverse meta-packages (explore as you grow).",
    "crumbs": [
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Appendix: Tips, Profiles, .libPaths</span>"
    ]
  },
  {
    "objectID": "12-appendix.html#short-glossary",
    "href": "12-appendix.html#short-glossary",
    "title": "13  Appendix: Tips, Profiles, .libPaths",
    "section": "13.6 Short Glossary",
    "text": "13.6 Short Glossary\n\nSDTM: Study Data Tabulation Model (FDA submission standard for raw domains).\nADaM: Analysis Data Model (derived analysis-ready datasets).\nTLF: Tables, Listings, Figures for reporting.",
    "crumbs": [
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Appendix: Tips, Profiles, .libPaths</span>"
    ]
  }
]