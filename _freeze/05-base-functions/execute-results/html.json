{
  "hash": "d8ac6c3c851ebb262c31e27eddfddfe1",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Base R Functions & Apply Family\"\n---\n\n# Common Utilities\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 1:10\nsum(x); mean(x); sd(x); var(x); quantile(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 55\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5.5\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3.02765\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 9.166667\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   0%   25%   50%   75%  100% \n 1.00  3.25  5.50  7.75 10.00 \n```\n\n\n:::\n\n```{.r .cell-code}\nseq(0, 1, by=0.1); rep(5, times=3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 0.0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5 5 5\n```\n\n\n:::\n:::\n\n\n# Apply Family\n\n::: {.cell}\n\n```{.r .cell-code}\nm <- matrix(1:9, nrow=3)\napply(m, 1, mean)  # row means\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4 5 6\n```\n\n\n:::\n\n```{.r .cell-code}\napply(m, 2, mean)  # col means\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2 5 8\n```\n\n\n:::\n\n```{.r .cell-code}\nlst <- list(a=1:3, b=10:12)\nsapply(lst, mean)   # simplifies result\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n a  b \n 2 11 \n```\n\n\n:::\n\n```{.r .cell-code}\nmapply(sum, 1:3, 10:12)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 11 13 15\n```\n\n\n:::\n:::\n\n\n# Subsetting Essentials\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- data.frame(id=1:3, val=c(10,20,30))\ndf[1, \"val\"]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 10\n```\n\n\n:::\n\n```{.r .cell-code}\ndf[df$val > 10, ]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  id val\n2  2  20\n3  3  30\n```\n\n\n:::\n:::\n\n\n# Exercises\n1. Use `apply` to get the max per column of a numeric matrix.\n2. Write a base R snippet to compute IQR for each column of `mtcars`.\n3. Compare `lapply` vs `sapply` in behavior on a list with mixed types.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}